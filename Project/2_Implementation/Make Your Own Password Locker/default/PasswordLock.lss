
PasswordLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000474  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000096c  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001b2  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  0000105a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d4  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e6  00000000  00000000  0000114e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000217  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006dc  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00002428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001d0  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000275  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  0000295d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 e7       	ldi	r30, 0x74	; 116
  36:	f4 e0       	ldi	r31, 0x04	; 4
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 3b       	cpi	r26, 0xB2	; 178
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>
  44:	43 d1       	rcall	.+646    	; 0x2cc <main>
  46:	14 c2       	rjmp	.+1064   	; 0x470 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <initPorts>:

//============================================================

void initPorts ( )
{
	DDRB = 0xFF; 
  4a:	8f ef       	ldi	r24, 0xFF	; 255
  4c:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x11; 
  4e:	81 e1       	ldi	r24, 0x11	; 17
  50:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0b01100000;
  52:	80 e6       	ldi	r24, 0x60	; 96
  54:	81 bb       	out	0x11, r24	; 17
}
  56:	08 95       	ret

00000058 <erPwd>:
//============================================================
void erPwd()
{
	eeprom_update_block ( (const void *) S_PWD, (void *) 1 , 6 ); 
  58:	8b e9       	ldi	r24, 0x9B	; 155
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	61 e0       	ldi	r22, 0x01	; 1
  5e:	70 e0       	ldi	r23, 0x00	; 0
  60:	46 e0       	ldi	r20, 0x06	; 6
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	e8 d1       	rcall	.+976    	; 0x436 <__eeupd_block_tn2313>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	83 ed       	ldi	r24, 0xD3	; 211
  68:	90 e3       	ldi	r25, 0x30	; 48
  6a:	01 97       	sbiw	r24, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <erPwd+0x12>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <erPwd+0x18>
  70:	00 00       	nop
	_delay_ms ( 50 );
}
  72:	08 95       	ret

00000074 <rdPwd>:
//============================================================
int rdPwd ( )
{
	eeprom_read_block ( (void *)S_PWD, (void *)(1), 6); 
  74:	8b e9       	ldi	r24, 0x9B	; 155
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	70 e0       	ldi	r23, 0x00	; 0
  7c:	46 e0       	ldi	r20, 0x06	; 6
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	cb d1       	rcall	.+918    	; 0x418 <__eerd_block_tn2313>

	if ( S_PWD[0]<'0' || S_PWD[0]>'9' )
  82:	80 91 9b 00 	lds	r24, 0x009B
  86:	80 53       	subi	r24, 0x30	; 48
  88:	8a 30       	cpi	r24, 0x0A	; 10
  8a:	30 f0       	brcs	.+12     	; 0x98 <rdPwd+0x24>
	{
		S_PWD[0] = 'X';
  8c:	88 e5       	ldi	r24, 0x58	; 88
  8e:	80 93 9b 00 	sts	0x009B, r24
		return -1;
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	3f ef       	ldi	r19, 0xFF	; 255
  96:	02 c0       	rjmp	.+4      	; 0x9c <rdPwd+0x28>
	}

	return 0;
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
}
  9c:	c9 01       	movw	r24, r18
  9e:	08 95       	ret

000000a0 <wrPwd>:
/************************************************************/
int wrPwd ( )
{
	eeprom_update_block((const void *) E_PWD, (void *)1 , 6); 
  a0:	82 ea       	ldi	r24, 0xA2	; 162
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	46 e0       	ldi	r20, 0x06	; 6
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	c4 d1       	rcall	.+904    	; 0x436 <__eeupd_block_tn2313>
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <wrPwd+0x12>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <wrPwd+0x18>
  b8:	00 00       	nop
	_delay_ms ( 50 );
	return ( rdPwd ( ) );
  ba:	dc df       	rcall	.-72     	; 0x74 <rdPwd>
}
  bc:	08 95       	ret

000000be <LCD_EB>:
//=============================================================================
void LCD_EB ( )
{
	

    LCD_CP |= LCD_EN; 
  be:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_EB+0x4>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_EB+0xa>
    _delay_us(50);	
   LCD_CP &= (~LCD_EN ); 
  c8:	96 98       	cbi	0x12, 6	; 18
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_EB+0xe>
   _delay_us(30);		
}
  d0:	08 95       	ret

000000d2 <LCD_CM>:
//=============================================================================
void LCD_CM ( unsigned char cmd )
{
	LCD_CP &= (~LCD_RS );
  d2:	95 98       	cbi	0x12, 5	; 18
	LCD_DP = cmd;
  d4:	88 bb       	out	0x18, r24	; 24
	LCD_EB ( );
  d6:	f3 df       	rcall	.-26     	; 0xbe <LCD_EB>
}
  d8:	08 95       	ret

000000da <LCD_CS>:
//=============================================================================
void LCD_CS ( )
{
	LCD_COL=1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 9a 00 	sts	0x009A, r24
	LCD_CM ( 0x01 );
  e0:	f8 df       	rcall	.-16     	; 0xd2 <LCD_CM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8d ee       	ldi	r24, 0xED	; 237
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <__stack+0x7>
  ea:	00 c0       	rjmp	.+0      	; 0xec <__stack+0xd>
  ec:	00 00       	nop
	_delay_ms(3);
}
  ee:	08 95       	ret

000000f0 <LCD_ST>:
  f0:	83 ed       	ldi	r24, 0xD3	; 211
  f2:	90 e3       	ldi	r25, 0x30	; 48
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_ST+0x4>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_ST+0xa>
  fa:	00 00       	nop

	unsigned char iv = 0x30; 


	_delay_ms ( 50 ); 
	LCD_CM  ( 0x30 );
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	e9 df       	rcall	.-46     	; 0xd2 <LCD_CM>
 100:	87 e8       	ldi	r24, 0x87	; 135
 102:	93 e1       	ldi	r25, 0x13	; 19
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_ST+0x14>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_ST+0x1a>
 10a:	00 00       	nop
	_delay_ms ( 20 ); 
	LCD_CM  ( 0x30 );
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	e1 df       	rcall	.-62     	; 0xd2 <LCD_CM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	92 e4       	ldi	r25, 0x42	; 66
 112:	9a 95       	dec	r25
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_ST+0x22>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_ST+0x28>
	_delay_us ( 200 );
	LCD_CM  ( 0x30 );
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	db df       	rcall	.-74     	; 0xd2 <LCD_CM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	87 ea       	ldi	r24, 0xA7	; 167
 11e:	91 e6       	ldi	r25, 0x61	; 97
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_ST+0x30>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_ST+0x36>
 126:	00 00       	nop
	_delay_ms ( 100 );

	iv |= 0b00001000; 
	iv |= 0b00000100; 
	LCD_CM ( iv ); 
 128:	8c e3       	ldi	r24, 0x3C	; 60
 12a:	d3 df       	rcall	.-90     	; 0xd2 <LCD_CM>
 12c:	89 e6       	ldi	r24, 0x69	; 105
 12e:	98 e1       	ldi	r25, 0x18	; 24
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_ST+0x40>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_ST+0x46>
 136:	00 00       	nop
	_delay_ms ( 25 );

	LCD_CM ( 0x0F );  
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	cb df       	rcall	.-106    	; 0xd2 <LCD_CM>
 13c:	89 e6       	ldi	r24, 0x69	; 105
 13e:	98 e1       	ldi	r25, 0x18	; 24
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_ST+0x50>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_ST+0x56>
 146:	00 00       	nop
	_delay_ms ( 25 );

	LCD_CM ( 0x06 );
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	c3 df       	rcall	.-122    	; 0xd2 <LCD_CM>
 14c:	83 ed       	ldi	r24, 0xD3	; 211
 14e:	90 e3       	ldi	r25, 0x30	; 48
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_ST+0x60>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_ST+0x66>
 156:	00 00       	nop
	_delay_ms ( 50 );

}
 158:	08 95       	ret

0000015a <LCD_CL>:
//=============================================================================
void LCD_CL ( uint8_t pos )
{
	LCD_CM ( 0xC0+pos+0 ); 
 15a:	80 54       	subi	r24, 0x40	; 64
 15c:	ba df       	rcall	.-140    	; 0xd2 <LCD_CM>
 15e:	8d ee       	ldi	r24, 0xED	; 237
 160:	92 e0       	ldi	r25, 0x02	; 2
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_CL+0x8>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_CL+0xe>
 168:	00 00       	nop
	_delay_ms(3);
}
 16a:	08 95       	ret

0000016c <LCD_CH>:
//=============================================================================

void LCD_CH ( unsigned char c )
{
 16c:	1f 93       	push	r17
 16e:	18 2f       	mov	r17, r24
	if ( LCD_COL==9 )
 170:	80 91 9a 00 	lds	r24, 0x009A
 174:	89 30       	cpi	r24, 0x09	; 9
 176:	11 f4       	brne	.+4      	; 0x17c <LCD_CH+0x10>
		LCD_CM ( 0xC0 ); 
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	ab df       	rcall	.-170    	; 0xd2 <LCD_CM>


	LCD_CP |= LCD_RS; 
 17c:	95 9a       	sbi	0x12, 5	; 18
	LCD_DP = c;
 17e:	18 bb       	out	0x18, r17	; 24
	LCD_EB ( );
 180:	9e df       	rcall	.-196    	; 0xbe <LCD_EB>
	LCD_COL++;
 182:	80 91 9a 00 	lds	r24, 0x009A
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 9a 00 	sts	0x009A, r24
}
 18c:	1f 91       	pop	r17
 18e:	08 95       	ret

00000190 <LCD_WS>:
//=============================================================================
void LCD_WS ( char s[] )
{
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	e8 2e       	mov	r14, r24
 19a:	e7 01       	movw	r28, r14
 19c:	7e 01       	movw	r14, r28
 19e:	f9 2e       	mov	r15, r25
 1a0:	e7 01       	movw	r28, r14
	for (int i=0; s[i]!=0; i++)
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <LCD_WS+0x1e>
		{
		LCD_CH ( s[i] );
 1a4:	e3 df       	rcall	.-58     	; 0x16c <LCD_CH>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	96 e0       	ldi	r25, 0x06	; 6
 1a8:	9a 95       	dec	r25
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_WS+0x18>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_WS+0x1e>
	LCD_COL++;
}
//=============================================================================
void LCD_WS ( char s[] )
{
	for (int i=0; s[i]!=0; i++)
 1ae:	89 91       	ld	r24, Y+
 1b0:	88 23       	and	r24, r24
 1b2:	c1 f7       	brne	.-16     	; 0x1a4 <LCD_WS+0x14>
		{
		LCD_CH ( s[i] );
		_delay_us ( 20 ); 
		}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	08 95       	ret

000001be <edPwd>:
//============================================================
int edPwd( )
{
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	0f 92       	push	r0
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	uint8_t loops = 100;
	uint8_t ep = 0;
	uint8_t pst = 0xFF;

	E_PWD[0]='0';
 1d4:	80 e3       	ldi	r24, 0x30	; 48
 1d6:	80 93 a2 00 	sts	0x00A2, r24
	E_PWD[1]='0';
 1da:	80 93 a3 00 	sts	0x00A3, r24
	E_PWD[2]='0';
 1de:	80 93 a4 00 	sts	0x00A4, r24
	E_PWD[3]='0';
 1e2:	80 93 a5 00 	sts	0x00A5, r24
	E_PWD[4]='0';
 1e6:	80 93 a6 00 	sts	0x00A6, r24
	E_PWD[5]='0';
 1ea:	80 93 a7 00 	sts	0x00A7, r24

	LCD_CS ( );
 1ee:	75 df       	rcall	.-278    	; 0xda <LCD_CS>
	if (S_PWD[0]=='X')
 1f0:	80 91 9b 00 	lds	r24, 0x009B
 1f4:	88 35       	cpi	r24, 0x58	; 88
 1f6:	19 f4       	brne	.+6      	; 0x1fe <edPwd+0x40>
		LCD_WS ( "NEW " );
 1f8:	80 e6       	ldi	r24, 0x60	; 96
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <edPwd+0x44>
	else
		LCD_WS ( "Open" );
 1fe:	85 e6       	ldi	r24, 0x65	; 101
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	c6 df       	rcall	.-116    	; 0x190 <LCD_WS>
	LCD_WS ( "PWD:" );
 204:	8a e6       	ldi	r24, 0x6A	; 106
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	c3 df       	rcall	.-122    	; 0x190 <LCD_WS>
//============================================================
int edPwd( )
{
	uint8_t loops = 100;
	uint8_t ep = 0;
	uint8_t pst = 0xFF;
 20a:	0f ef       	ldi	r16, 0xFF	; 255
}
//============================================================
int edPwd( )
{
	uint8_t loops = 100;
	uint8_t ep = 0;
 20c:	10 e0       	ldi	r17, 0x00	; 0
		}
}
//============================================================
int edPwd( )
{
	uint8_t loops = 100;
 20e:	24 e6       	ldi	r18, 0x64	; 100
		LCD_WS ( "Open" );
	LCD_WS ( "PWD:" );
	while ( loops > 0 )
	{
		loops--;
		PORTA ^= BLKR;
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	e9 2e       	mov	r14, r25

		if (( pst & B_UP ) == 0 )
		{
			E_PWD[ep]++;
			if ( E_PWD[ep] > '9' )
				E_PWD[ep] = '0';
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	f8 2e       	mov	r15, r24
		LCD_WS ( "Open" );
	LCD_WS ( "PWD:" );
	while ( loops > 0 )
	{
		loops--;
		PORTA ^= BLKR;
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	8e 25       	eor	r24, r14
 21c:	8b bb       	out	0x1b, r24	; 27
		LCD_CL ( 0 );
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	29 83       	std	Y+1, r18	; 0x01
 222:	9b df       	rcall	.-202    	; 0x15a <LCD_CL>
		LCD_WS ( H_PWD );
 224:	89 ea       	ldi	r24, 0xA9	; 169
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	b3 df       	rcall	.-154    	; 0x190 <LCD_WS>
		LCD_CL ( ep );
 22a:	81 2f       	mov	r24, r17
 22c:	96 df       	rcall	.-212    	; 0x15a <LCD_CL>
		LCD_CH ( E_PWD[ep] );
 22e:	c1 2e       	mov	r12, r17
 230:	dd 24       	eor	r13, r13
 232:	f6 01       	movw	r30, r12
 234:	ee 55       	subi	r30, 0x5E	; 94
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	80 81       	ld	r24, Z
 23a:	98 df       	rcall	.-208    	; 0x16c <LCD_CH>
		LCD_CL ( ep );
 23c:	81 2f       	mov	r24, r17
 23e:	8d df       	rcall	.-230    	; 0x15a <LCD_CL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	83 ed       	ldi	r24, 0xD3	; 211
 242:	90 e3       	ldi	r25, 0x30	; 48
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <edPwd+0x86>
 248:	00 c0       	rjmp	.+0      	; 0x24a <edPwd+0x8c>
 24a:	00 00       	nop
		_delay_ms(50);

		if (pst != B_ALL)
 24c:	29 81       	ldd	r18, Y+1	; 0x01
 24e:	0c 31       	cpi	r16, 0x1C	; 28
 250:	11 f4       	brne	.+4      	; 0x256 <edPwd+0x98>
	else
		LCD_WS ( "Open" );
	LCD_WS ( "PWD:" );
	while ( loops > 0 )
	{
		loops--;
 252:	21 50       	subi	r18, 0x01	; 1
 254:	0a c0       	rjmp	.+20     	; 0x26a <edPwd+0xac>
 256:	8f e9       	ldi	r24, 0x9F	; 159
 258:	96 e8       	ldi	r25, 0x86	; 134
 25a:	a1 e0       	ldi	r26, 0x01	; 1
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	a0 40       	sbci	r26, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <edPwd+0x9e>
 264:	00 c0       	rjmp	.+0      	; 0x266 <edPwd+0xa8>
 266:	00 00       	nop
		LCD_CL ( ep );
		_delay_ms(50);

		if (pst != B_ALL)
		{
			loops = 100;
 268:	24 e6       	ldi	r18, 0x64	; 100
			_delay_ms(500);
		}

		pst = (PIND & B_ALL);
 26a:	00 b3       	in	r16, 0x10	; 16
 26c:	0c 71       	andi	r16, 0x1C	; 28

		if (( pst & B_UP ) == 0 )
 26e:	02 fd       	sbrc	r16, 2
 270:	0a c0       	rjmp	.+20     	; 0x286 <edPwd+0xc8>
		{
			E_PWD[ep]++;
 272:	f6 01       	movw	r30, r12
 274:	ee 55       	subi	r30, 0x5E	; 94
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	80 81       	ld	r24, Z
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 83       	st	Z, r24
			if ( E_PWD[ep] > '9' )
 27e:	8a 33       	cpi	r24, 0x3A	; 58
 280:	60 f0       	brcs	.+24     	; 0x29a <edPwd+0xdc>
				E_PWD[ep] = '0';
 282:	f0 82       	st	Z, r15
 284:	0a c0       	rjmp	.+20     	; 0x29a <edPwd+0xdc>
		}
		else if (( pst & B_RIGHT ) == 0 )
 286:	03 fd       	sbrc	r16, 3
 288:	04 c0       	rjmp	.+8      	; 0x292 <edPwd+0xd4>
		{
			ep++;
 28a:	1f 5f       	subi	r17, 0xFF	; 255
			if ( ep > 5 )
 28c:	16 30       	cpi	r17, 0x06	; 6
 28e:	20 f4       	brcc	.+8      	; 0x298 <edPwd+0xda>
 290:	04 c0       	rjmp	.+8      	; 0x29a <edPwd+0xdc>
				ep = 0;
		}
		else if (( pst & B_ENTER ) == 0 )
 292:	04 fd       	sbrc	r16, 4
 294:	02 c0       	rjmp	.+4      	; 0x29a <edPwd+0xdc>
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <edPwd+0xe8>
		}
		else if (( pst & B_RIGHT ) == 0 )
		{
			ep++;
			if ( ep > 5 )
				ep = 0;
 298:	10 e0       	ldi	r17, 0x00	; 0
	if (S_PWD[0]=='X')
		LCD_WS ( "NEW " );
	else
		LCD_WS ( "Open" );
	LCD_WS ( "PWD:" );
	while ( loops > 0 )
 29a:	22 23       	and	r18, r18
 29c:	09 f0       	breq	.+2      	; 0x2a0 <edPwd+0xe2>
 29e:	bc cf       	rjmp	.-136    	; 0x218 <edPwd+0x5a>
		{
			return 1;  // edited
		}

	}
	return 0;
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <edPwd+0xec>
			if ( ep > 5 )
				ep = 0;
		}
		else if (( pst & B_ENTER ) == 0 )
		{
			return 1;  // edited
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
		}

	}
	return 0;

}
 2aa:	c9 01       	movw	r24, r18
 2ac:	0f 90       	pop	r0
 2ae:	cf 91       	pop	r28
 2b0:	df 91       	pop	r29
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	08 95       	ret

000002c0 <setLock>:
//============================================================
void setLock ( uint8_t stat )
{
	if (stat)
 2c0:	88 23       	and	r24, r24
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <setLock+0x8>
		PORTA |= RELAY;
 2c4:	d8 9a       	sbi	0x1b, 0	; 27
 2c6:	08 95       	ret
	else
		PORTA &= (~RELAY);
 2c8:	d8 98       	cbi	0x1b, 0	; 27
 2ca:	08 95       	ret

000002cc <main>:
 2cc:	83 ec       	ldi	r24, 0xC3	; 195
 2ce:	99 e0       	ldi	r25, 0x09	; 9
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x4>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0xa>
 2d6:	00 00       	nop
{
	uint8_t retval=0;

	_delay_ms ( 10 );

	initPorts ();
 2d8:	b8 de       	rcall	.-656    	; 0x4a <initPorts>
	setLock ( CLOSE );
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	f1 df       	rcall	.-30     	; 0x2c0 <setLock>
 2de:	8f eb       	ldi	r24, 0xBF	; 191
 2e0:	97 e2       	ldi	r25, 0x27	; 39
 2e2:	a9 e0       	ldi	r26, 0x09	; 9
 2e4:	81 50       	subi	r24, 0x01	; 1
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	a0 40       	sbci	r26, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x18>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x22>
 2ee:	00 00       	nop
	_delay_ms ( 3000 );
	
	LCD_ST ( );
 2f0:	ff de       	rcall	.-514    	; 0xf0 <LCD_ST>
 2f2:	a7 ea       	ldi	r26, 0xA7	; 167
 2f4:	b1 e6       	ldi	r27, 0x61	; 97
 2f6:	11 97       	sbiw	r26, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x2a>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x30>
 2fc:	00 00       	nop
	_delay_ms ( 100 );

	LCD_CS();
 2fe:	ed de       	rcall	.-550    	; 0xda <LCD_CS>
	LCD_WS("PWD LOCK");
 300:	8f e6       	ldi	r24, 0x6F	; 111
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	45 df       	rcall	.-374    	; 0x190 <LCD_WS>
 306:	8f e7       	ldi	r24, 0x7F	; 127
 308:	9a e1       	ldi	r25, 0x1A	; 26
 30a:	a6 e0       	ldi	r26, 0x06	; 6
 30c:	81 50       	subi	r24, 0x01	; 1
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	a0 40       	sbci	r26, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x40>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x4a>
 316:	00 00       	nop
	_delay_ms ( 2000 );

	if ( ( PIND & J_ERAS ) == 0 )
 318:	80 99       	sbic	0x10, 0	; 16
 31a:	0e c0       	rjmp	.+28     	; 0x338 <main+0x6c>
	{
		erPwd();
 31c:	9d de       	rcall	.-710    	; 0x58 <erPwd>
		LCD_CS();
 31e:	dd de       	rcall	.-582    	; 0xda <LCD_CS>
		LCD_WS("ERASED");
 320:	88 e7       	ldi	r24, 0x78	; 120
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	35 df       	rcall	.-406    	; 0x190 <LCD_WS>
 326:	8f e7       	ldi	r24, 0x7F	; 127
 328:	9a e1       	ldi	r25, 0x1A	; 26
 32a:	a6 e0       	ldi	r26, 0x06	; 6
 32c:	81 50       	subi	r24, 0x01	; 1
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	a0 40       	sbci	r26, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0x60>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x6a>
 336:	00 00       	nop
		_delay_ms ( 2000 );
	}

	rdPwd ( );
 338:	9d de       	rcall	.-710    	; 0x74 <rdPwd>

	LCD_CS();
 33a:	cf de       	rcall	.-610    	; 0xda <LCD_CS>
 33c:	a3 ed       	ldi	r26, 0xD3	; 211
 33e:	b0 e3       	ldi	r27, 0x30	; 48
 340:	11 97       	sbiw	r26, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <main+0x74>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x7a>
 346:	00 00       	nop
	
	
	while ( 1 )
	{
		
		setLock ( CLOSE );
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	ba df       	rcall	.-140    	; 0x2c0 <setLock>
		retval = edPwd();
 34c:	38 df       	rcall	.-400    	; 0x1be <edPwd>
		PORTA &= (~BLKR);
 34e:	d9 98       	cbi	0x1b, 1	; 27
		if ( retval > 0 )
 350:	88 23       	and	r24, r24
 352:	a1 f3       	breq	.-24     	; 0x33c <main+0x70>
		{
			if ( S_PWD[0]=='X' ) 
 354:	80 91 9b 00 	lds	r24, 0x009B
 358:	90 91 a2 00 	lds	r25, 0x00A2
 35c:	88 35       	cpi	r24, 0x58	; 88
 35e:	e1 f4       	brne	.+56     	; 0x398 <main+0xcc>
			{
				if ( E_PWD[0]=='0' && E_PWD[1]=='0' && E_PWD[2]=='0' &&
 360:	90 33       	cpi	r25, 0x30	; 48
 362:	a1 f4       	brne	.+40     	; 0x38c <main+0xc0>
 364:	80 91 a3 00 	lds	r24, 0x00A3
 368:	80 33       	cpi	r24, 0x30	; 48
 36a:	81 f4       	brne	.+32     	; 0x38c <main+0xc0>
 36c:	80 91 a4 00 	lds	r24, 0x00A4
 370:	80 33       	cpi	r24, 0x30	; 48
 372:	61 f4       	brne	.+24     	; 0x38c <main+0xc0>
 374:	80 91 a5 00 	lds	r24, 0x00A5
 378:	80 33       	cpi	r24, 0x30	; 48
 37a:	41 f4       	brne	.+16     	; 0x38c <main+0xc0>
					 E_PWD[3]=='0' && E_PWD[4]=='0' && E_PWD[5]=='0' )
 37c:	80 91 a6 00 	lds	r24, 0x00A6
 380:	80 33       	cpi	r24, 0x30	; 48
 382:	21 f4       	brne	.+8      	; 0x38c <main+0xc0>
 384:	80 91 a7 00 	lds	r24, 0x00A7
 388:	80 33       	cpi	r24, 0x30	; 48
 38a:	b9 f1       	breq	.+110    	; 0x3fa <main+0x12e>
						LCD_CL ( 0 );
						LCD_WS("INVALID");
				}
				else
				{
					wrPwd();
 38c:	89 de       	rcall	.-750    	; 0xa0 <wrPwd>
					LCD_CL ( 0 );
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	e4 de       	rcall	.-568    	; 0x15a <LCD_CL>
					LCD_WS("SAVED.");
 392:	87 e8       	ldi	r24, 0x87	; 135
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	35 c0       	rjmp	.+106    	; 0x402 <main+0x136>
				}
			}
			else
			{
				if ( E_PWD[0]==S_PWD[0] && E_PWD[1]==S_PWD[1] && E_PWD[2]==S_PWD[2] &&
 398:	98 17       	cp	r25, r24
 39a:	79 f5       	brne	.+94     	; 0x3fa <main+0x12e>
 39c:	90 91 a3 00 	lds	r25, 0x00A3
 3a0:	80 91 9c 00 	lds	r24, 0x009C
 3a4:	98 17       	cp	r25, r24
 3a6:	49 f5       	brne	.+82     	; 0x3fa <main+0x12e>
 3a8:	90 91 a4 00 	lds	r25, 0x00A4
 3ac:	80 91 9d 00 	lds	r24, 0x009D
 3b0:	98 17       	cp	r25, r24
 3b2:	19 f5       	brne	.+70     	; 0x3fa <main+0x12e>
 3b4:	90 91 a5 00 	lds	r25, 0x00A5
 3b8:	80 91 9e 00 	lds	r24, 0x009E
 3bc:	98 17       	cp	r25, r24
 3be:	e9 f4       	brne	.+58     	; 0x3fa <main+0x12e>
					 E_PWD[3]==S_PWD[3] && E_PWD[4]==S_PWD[4] && E_PWD[5]==S_PWD[5] )
 3c0:	90 91 a6 00 	lds	r25, 0x00A6
 3c4:	80 91 9f 00 	lds	r24, 0x009F
 3c8:	98 17       	cp	r25, r24
 3ca:	b9 f4       	brne	.+46     	; 0x3fa <main+0x12e>
 3cc:	90 91 a7 00 	lds	r25, 0x00A7
 3d0:	80 91 a0 00 	lds	r24, 0x00A0
 3d4:	98 17       	cp	r25, r24
 3d6:	89 f4       	brne	.+34     	; 0x3fa <main+0x12e>
					 {
						setLock ( OPEN );
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	72 df       	rcall	.-284    	; 0x2c0 <setLock>
						PORTA |= BLKR;
 3dc:	d9 9a       	sbi	0x1b, 1	; 27
						LCD_CS();
 3de:	7d de       	rcall	.-774    	; 0xda <LCD_CS>
						LCD_WS("LOCK OPENED");	
 3e0:	8e e8       	ldi	r24, 0x8E	; 142
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	d5 de       	rcall	.-598    	; 0x190 <LCD_WS>
 3e6:	8f e7       	ldi	r24, 0x7F	; 127
 3e8:	9f e4       	ldi	r25, 0x4F	; 79
 3ea:	a2 e1       	ldi	r26, 0x12	; 18
 3ec:	81 50       	subi	r24, 0x01	; 1
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	a0 40       	sbci	r26, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x120>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x12a>
 3f6:	00 00       	nop
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <main+0x138>
						_delay_ms(6000);
					 }
				else
					{
					 LCD_CL ( 0 );
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	ae de       	rcall	.-676    	; 0x15a <LCD_CL>
					 LCD_WS("INVALID");
 3fe:	8f e7       	ldi	r24, 0x7F	; 127
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	c6 de       	rcall	.-628    	; 0x190 <LCD_WS>
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	94 e3       	ldi	r25, 0x34	; 52
 408:	ac e0       	ldi	r26, 0x0C	; 12
 40a:	81 50       	subi	r24, 0x01	; 1
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	a0 40       	sbci	r26, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <main+0x13e>
 412:	00 c0       	rjmp	.+0      	; 0x414 <main+0x148>
 414:	00 00       	nop
 416:	92 cf       	rjmp	.-220    	; 0x33c <main+0x70>

00000418 <__eerd_block_tn2313>:
 418:	a8 2f       	mov	r26, r24
 41a:	86 2f       	mov	r24, r22

0000041c <__eerd_blraw_tn2313>:
 41c:	e8 2f       	mov	r30, r24
 41e:	e1 99       	sbic	0x1c, 1	; 28
 420:	fe cf       	rjmp	.-4      	; 0x41e <__eerd_blraw_tn2313+0x2>
 422:	1f ba       	out	0x1f, r1	; 31
 424:	05 c0       	rjmp	.+10     	; 0x430 <__eerd_blraw_tn2313+0x14>
 426:	ee bb       	out	0x1e, r30	; 30
 428:	e0 9a       	sbi	0x1c, 0	; 28
 42a:	e3 95       	inc	r30
 42c:	0d b2       	in	r0, 0x1d	; 29
 42e:	0d 92       	st	X+, r0
 430:	41 50       	subi	r20, 0x01	; 1
 432:	c8 f7       	brcc	.-14     	; 0x426 <__eerd_blraw_tn2313+0xa>
 434:	08 95       	ret

00000436 <__eeupd_block_tn2313>:
 436:	a8 2f       	mov	r26, r24
 438:	a4 0f       	add	r26, r20
 43a:	41 50       	subi	r20, 0x01	; 1
 43c:	30 f0       	brcs	.+12     	; 0x44a <__eeupd_block_tn2313+0x14>
 43e:	86 2f       	mov	r24, r22
 440:	84 0f       	add	r24, r20
 442:	2e 91       	ld	r18, -X
 444:	04 d0       	rcall	.+8      	; 0x44e <__eeupd_r18_tn2313>
 446:	41 50       	subi	r20, 0x01	; 1
 448:	e0 f7       	brcc	.-8      	; 0x442 <__eeupd_block_tn2313+0xc>
 44a:	08 95       	ret

0000044c <__eeupd_byte_tn2313>:
 44c:	26 2f       	mov	r18, r22

0000044e <__eeupd_r18_tn2313>:
 44e:	e1 99       	sbic	0x1c, 1	; 28
 450:	fe cf       	rjmp	.-4      	; 0x44e <__eeupd_r18_tn2313>
 452:	1f ba       	out	0x1f, r1	; 31
 454:	8e bb       	out	0x1e, r24	; 30
 456:	e0 9a       	sbi	0x1c, 0	; 28
 458:	81 50       	subi	r24, 0x01	; 1
 45a:	0d b2       	in	r0, 0x1d	; 29
 45c:	02 16       	cp	r0, r18
 45e:	39 f0       	breq	.+14     	; 0x46e <__eeupd_r18_tn2313+0x20>
 460:	1c ba       	out	0x1c, r1	; 28
 462:	2d bb       	out	0x1d, r18	; 29
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	e2 9a       	sbi	0x1c, 2	; 28
 46a:	e1 9a       	sbi	0x1c, 1	; 28
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
