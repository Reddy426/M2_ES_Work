
MAIN_M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f98  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000f98  0000104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a6  008000c8  008000c8  000010b4  2**0
                  ALLOC
  3 .eeprom       00000192  00810000  00810000  000010b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00001246  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002fa  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001292  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000319  00000000  00000000  000027f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000143f  00000000  00000000  00002b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00003f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b9  00000000  00000000  000041bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049f  00000000  00000000  00004475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004914  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	2b c7       	rjmp	.+3670   	; 0xe6e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e9       	ldi	r30, 0x98	; 152
  3a:	ff e0       	ldi	r31, 0x0F	; 15
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 3c       	cpi	r26, 0xC8	; 200
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	12 e0       	ldi	r17, 0x02	; 2
  4a:	a8 ec       	ldi	r26, 0xC8	; 200
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 36       	cpi	r26, 0x6E	; 110
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e5 d3       	rcall	.+1994   	; 0x824 <main>
  5a:	9c c7       	rjmp	.+3896   	; 0xf94 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <UART_init>:
For initializing UART for Tx-Rx @8Mhz, 9600bps, 8 bit transmission,1 stop bit
*************************************************************************/

void UART_init()
{
UBRRH=0;
  5e:	10 bc       	out	0x20, r1	; 32
UBRRL=51;
  60:	83 e3       	ldi	r24, 0x33	; 51
  62:	89 b9       	out	0x09, r24	; 9
UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  64:	86 e8       	ldi	r24, 0x86	; 134
  66:	80 bd       	out	0x20, r24	; 32
UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
  68:	88 e9       	ldi	r24, 0x98	; 152
  6a:	8a b9       	out	0x0a, r24	; 10
}
  6c:	08 95       	ret

0000006e <UART_tx>:
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
  6e:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
  70:	5d 9b       	sbis	0x0b, 5	; 11
  72:	fe cf       	rjmp	.-4      	; 0x70 <UART_tx+0x2>
}
  74:	08 95       	ret

00000076 <UART_rx>:
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
  76:	5f 9b       	sbis	0x0b, 7	; 11
  78:	fe cf       	rjmp	.-4      	; 0x76 <UART_rx>
return(UDR);
  7a:	8c b1       	in	r24, 0x0c	; 12
}
  7c:	08 95       	ret

0000007e <UART_txs>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	e4 ec       	ldi	r30, 0xC4	; 196
  80:	f9 e0       	ldi	r31, 0x09	; 9
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <UART_txs+0x4>
  86:	fc 01       	movw	r30, r24
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
  88:	28 ea       	ldi	r18, 0xA8	; 168
  8a:	31 e6       	ldi	r19, 0x61	; 97
  8c:	07 c0       	rjmp	.+14     	; 0x9c <UART_txs+0x1e>
  8e:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <UART_txs+0x12>
  94:	c9 01       	movw	r24, r18
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <UART_txs+0x18>
  9a:	31 96       	adiw	r30, 0x01	; 1

void UART_txs(uint8_t s[])
{
unsigned int a=0;
_delay_ms(10);
while(s[a]!='\0')
  9c:	80 81       	ld	r24, Z
  9e:	88 23       	and	r24, r24
  a0:	b1 f7       	brne	.-20     	; 0x8e <UART_txs+0x10>
{
UART_tx(s[a]);
_delay_ms(100);
a++;
}
}
  a2:	08 95       	ret

000000a4 <UART_txsl>:

void UART_txsl(uint8_t s[],uint8_t b)
{
  a4:	ac 01       	movw	r20, r24
  a6:	e4 ec       	ldi	r30, 0xC4	; 196
  a8:	f9 e0       	ldi	r31, 0x09	; 9
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <UART_txsl+0x6>
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
unsigned int a=0;
_delay_ms(10);
while(a<b)
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	a8 ea       	ldi	r26, 0xA8	; 168
  b6:	b1 e6       	ldi	r27, 0x61	; 97
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <UART_txsl+0x2e>
{
UART_tx(s[a]);
  ba:	fa 01       	movw	r30, r20
  bc:	e2 0f       	add	r30, r18
  be:	f3 1f       	adc	r31, r19
  c0:	80 81       	ld	r24, Z
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
  c2:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
  c4:	5d 9b       	sbis	0x0b, 5	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <UART_txsl+0x20>
  c8:	fd 01       	movw	r30, r26
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <UART_txsl+0x26>
_delay_ms(10);
while(a<b)
{
UART_tx(s[a]);
_delay_ms(100);
a++;
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255

void UART_txsl(uint8_t s[],uint8_t b)
{
unsigned int a=0;
_delay_ms(10);
while(a<b)
  d2:	26 17       	cp	r18, r22
  d4:	37 07       	cpc	r19, r23
  d6:	88 f3       	brcs	.-30     	; 0xba <UART_txsl+0x16>
{
UART_tx(s[a]);
_delay_ms(100);
a++;
}
}
  d8:	08 95       	ret

000000da <init_i2c>:

uint8_t HH[2],MM[2],SS[2],dd[2],mm[2],yr[2];

void init_i2c()
{
TWSR = 0X00;
  da:	11 b8       	out	0x01, r1	; 1
TWBR = 0X47;
  dc:	87 e4       	ldi	r24, 0x47	; 71
  de:	80 b9       	out	0x00, r24	; 0
TWCR = (1<<TWEN);
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	86 bf       	out	0x36, r24	; 54
}
  e4:	08 95       	ret

000000e6 <read_i2c>:

unsigned char read_i2c()
{
TWCR = (1<<TWINT)|(1<<TWEN);
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
  ea:	06 b6       	in	r0, 0x36	; 54
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <read_i2c+0x4>
return TWDR;
  f0:	83 b1       	in	r24, 0x03	; 3
}
  f2:	08 95       	ret

000000f4 <write_i2c>:

void write_i2c(unsigned char ch)
{
TWDR = ch;
  f4:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  f6:	84 ec       	ldi	r24, 0xC4	; 196
  f8:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
  fa:	06 b6       	in	r0, 0x36	; 54
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <write_i2c+0x6>
}
 100:	08 95       	ret

00000102 <start>:

void start()
{
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 102:	84 ea       	ldi	r24, 0xA4	; 164
 104:	86 bf       	out	0x36, r24	; 54
while((TWCR &(1<<TWINT))==0);
 106:	06 b6       	in	r0, 0x36	; 54
 108:	07 fe       	sbrs	r0, 7
 10a:	fd cf       	rjmp	.-6      	; 0x106 <start+0x4>
}
 10c:	08 95       	ret

0000010e <stop>:

void stop()
{
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 10e:	84 e9       	ldi	r24, 0x94	; 148
 110:	86 bf       	out	0x36, r24	; 54
 112:	8a ef       	ldi	r24, 0xFA	; 250
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <stop+0x8>
_delay_ms(1);
}
 11a:	08 95       	ret

0000011c <rtc_write>:

void rtc_write(char dev_addr,char dev_loc,char dev_data)
{
 11c:	98 2f       	mov	r25, r24
while(!(TWCR&(1<<TWINT)));
}

void start()
{
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 11e:	84 ea       	ldi	r24, 0xA4	; 164
 120:	86 bf       	out	0x36, r24	; 54
while((TWCR &(1<<TWINT))==0);
 122:	06 b6       	in	r0, 0x36	; 54
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <rtc_write+0x6>
return TWDR;
}

void write_i2c(unsigned char ch)
{
TWDR = ch;
 128:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 12a:	84 ec       	ldi	r24, 0xC4	; 196
 12c:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
 12e:	06 b6       	in	r0, 0x36	; 54
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <rtc_write+0x12>
return TWDR;
}

void write_i2c(unsigned char ch)
{
TWDR = ch;
 134:	63 b9       	out	0x03, r22	; 3
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 136:	84 ec       	ldi	r24, 0xC4	; 196
 138:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <rtc_write+0x1e>
return TWDR;
}

void write_i2c(unsigned char ch)
{
TWDR = ch;
 140:	43 b9       	out	0x03, r20	; 3
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 142:	84 ec       	ldi	r24, 0xC4	; 196
 144:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
 146:	06 b6       	in	r0, 0x36	; 54
 148:	07 fe       	sbrs	r0, 7
 14a:	fd cf       	rjmp	.-6      	; 0x146 <rtc_write+0x2a>
while((TWCR &(1<<TWINT))==0);
}

void stop()
{
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 14c:	84 e9       	ldi	r24, 0x94	; 148
 14e:	86 bf       	out	0x36, r24	; 54
 150:	8a ef       	ldi	r24, 0xFA	; 250
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <rtc_write+0x38>
write_i2c(dev_addr);
write_i2c(dev_loc);
write_i2c(dev_data);
stop();
_delay_ms(10);
}
 158:	84 ec       	ldi	r24, 0xC4	; 196
 15a:	99 e0       	ldi	r25, 0x09	; 9
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <rtc_write+0x40>
 160:	08 95       	ret

00000162 <rtc_read>:

unsigned char rtc_read(char dev_addr,char dev_loc)
{
 162:	98 2f       	mov	r25, r24
while(!(TWCR&(1<<TWINT)));
}

void start()
{
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 164:	84 ea       	ldi	r24, 0xA4	; 164
 166:	86 bf       	out	0x36, r24	; 54
while((TWCR &(1<<TWINT))==0);
 168:	06 b6       	in	r0, 0x36	; 54
 16a:	07 fe       	sbrs	r0, 7
 16c:	fd cf       	rjmp	.-6      	; 0x168 <rtc_read+0x6>
return TWDR;
}

void write_i2c(unsigned char ch)
{
TWDR = ch;
 16e:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 170:	84 ec       	ldi	r24, 0xC4	; 196
 172:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
 174:	06 b6       	in	r0, 0x36	; 54
 176:	07 fe       	sbrs	r0, 7
 178:	fd cf       	rjmp	.-6      	; 0x174 <rtc_read+0x12>
return TWDR;
}

void write_i2c(unsigned char ch)
{
TWDR = ch;
 17a:	63 b9       	out	0x03, r22	; 3
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 17c:	84 ec       	ldi	r24, 0xC4	; 196
 17e:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
 180:	06 b6       	in	r0, 0x36	; 54
 182:	07 fe       	sbrs	r0, 7
 184:	fd cf       	rjmp	.-6      	; 0x180 <rtc_read+0x1e>
}

void start()
{
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 186:	84 ea       	ldi	r24, 0xA4	; 164
 188:	86 bf       	out	0x36, r24	; 54
while((TWCR &(1<<TWINT))==0);
 18a:	06 b6       	in	r0, 0x36	; 54
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <rtc_read+0x28>

write_i2c(dev_addr);
write_i2c(dev_loc);

start();
write_i2c(dev_addr|0x01);
 190:	91 60       	ori	r25, 0x01	; 1
return TWDR;
}

void write_i2c(unsigned char ch)
{
TWDR = ch;
 192:	93 b9       	out	0x03, r25	; 3
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 194:	84 ec       	ldi	r24, 0xC4	; 196
 196:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
 198:	06 b6       	in	r0, 0x36	; 54
 19a:	07 fe       	sbrs	r0, 7
 19c:	fd cf       	rjmp	.-6      	; 0x198 <rtc_read+0x36>
TWCR = (1<<TWEN);
}

unsigned char read_i2c()
{
TWCR = (1<<TWINT)|(1<<TWEN);
 19e:	84 e8       	ldi	r24, 0x84	; 132
 1a0:	86 bf       	out	0x36, r24	; 54
while(!(TWCR & (1<<TWINT)));
 1a2:	06 b6       	in	r0, 0x36	; 54
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <rtc_read+0x40>
return TWDR;
 1a8:	83 b1       	in	r24, 0x03	; 3
while((TWCR &(1<<TWINT))==0);
}

void stop()
{
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 1aa:	94 e9       	ldi	r25, 0x94	; 148
 1ac:	96 bf       	out	0x36, r25	; 54
 1ae:	ea ef       	ldi	r30, 0xFA	; 250
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <rtc_read+0x50>
write_i2c(dev_addr|0x01);
ch = read_i2c();

stop();
return ch;
}
 1b6:	08 95       	ret

000001b8 <get_time_date>:


void get_time_date()
{
char ch;
ch = rtc_read(0xd0 , 0x02);
 1b8:	80 ed       	ldi	r24, 0xD0	; 208
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	d2 df       	rcall	.-92     	; 0x162 <rtc_read>
HH[0]=(ch/16+48);
 1be:	98 2f       	mov	r25, r24
 1c0:	92 95       	swap	r25
 1c2:	9f 70       	andi	r25, 0x0F	; 15
 1c4:	90 5d       	subi	r25, 0xD0	; 208
 1c6:	90 93 fc 00 	sts	0x00FC, r25
HH[1]=(ch%16+48);
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	80 93 fd 00 	sts	0x00FD, r24

ch = rtc_read(0xd0 , 0x01);
 1d2:	80 ed       	ldi	r24, 0xD0	; 208
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	c5 df       	rcall	.-118    	; 0x162 <rtc_read>
MM[0]=(ch/16+48);
 1d8:	98 2f       	mov	r25, r24
 1da:	92 95       	swap	r25
 1dc:	9f 70       	andi	r25, 0x0F	; 15
 1de:	90 5d       	subi	r25, 0xD0	; 208
 1e0:	90 93 02 01 	sts	0x0102, r25
MM[1]=(ch%16+48);
 1e4:	8f 70       	andi	r24, 0x0F	; 15
 1e6:	80 5d       	subi	r24, 0xD0	; 208
 1e8:	80 93 03 01 	sts	0x0103, r24

ch = rtc_read(0xd0 , 0x00);
 1ec:	80 ed       	ldi	r24, 0xD0	; 208
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	b8 df       	rcall	.-144    	; 0x162 <rtc_read>
SS[0]=(ch/16+48);
 1f2:	98 2f       	mov	r25, r24
 1f4:	92 95       	swap	r25
 1f6:	9f 70       	andi	r25, 0x0F	; 15
 1f8:	90 5d       	subi	r25, 0xD0	; 208
 1fa:	90 93 e6 00 	sts	0x00E6, r25
SS[1]=(ch%16+48);
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	80 5d       	subi	r24, 0xD0	; 208
 202:	80 93 e7 00 	sts	0x00E7, r24

ch = rtc_read(0xd0 , 0x04);
 206:	80 ed       	ldi	r24, 0xD0	; 208
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	ab df       	rcall	.-170    	; 0x162 <rtc_read>
dd[0]=(ch/16+48);
 20c:	98 2f       	mov	r25, r24
 20e:	92 95       	swap	r25
 210:	9f 70       	andi	r25, 0x0F	; 15
 212:	90 5d       	subi	r25, 0xD0	; 208
 214:	90 93 fe 00 	sts	0x00FE, r25
dd[1]=(ch%16+48);
 218:	8f 70       	andi	r24, 0x0F	; 15
 21a:	80 5d       	subi	r24, 0xD0	; 208
 21c:	80 93 ff 00 	sts	0x00FF, r24

ch = rtc_read(0xd0 , 0x05);
 220:	80 ed       	ldi	r24, 0xD0	; 208
 222:	65 e0       	ldi	r22, 0x05	; 5
 224:	9e df       	rcall	.-196    	; 0x162 <rtc_read>
mm[0]=(ch/16+48);
 226:	98 2f       	mov	r25, r24
 228:	92 95       	swap	r25
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	90 5d       	subi	r25, 0xD0	; 208
 22e:	90 93 cf 00 	sts	0x00CF, r25
mm[1]=(ch%16+48);
 232:	8f 70       	andi	r24, 0x0F	; 15
 234:	80 5d       	subi	r24, 0xD0	; 208
 236:	80 93 d0 00 	sts	0x00D0, r24

ch = rtc_read(0xd0 , 0x06);
 23a:	80 ed       	ldi	r24, 0xD0	; 208
 23c:	66 e0       	ldi	r22, 0x06	; 6
 23e:	91 df       	rcall	.-222    	; 0x162 <rtc_read>
yr[0]=(ch/16+48);
 240:	98 2f       	mov	r25, r24
 242:	92 95       	swap	r25
 244:	9f 70       	andi	r25, 0x0F	; 15
 246:	90 5d       	subi	r25, 0xD0	; 208
 248:	90 93 00 01 	sts	0x0100, r25
yr[1]=(ch%16+48);
 24c:	8f 70       	andi	r24, 0x0F	; 15
 24e:	80 5d       	subi	r24, 0xD0	; 208
 250:	80 93 01 01 	sts	0x0101, r24


}
 254:	08 95       	ret

00000256 <set_time_date>:

void set_time_date(uint8_t H[],uint8_t M[],uint8_t d[],uint8_t m[],uint8_t y[])
{
 256:	af 92       	push	r10
 258:	bf 92       	push	r11
 25a:	cf 92       	push	r12
 25c:	df 92       	push	r13
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	fc 01       	movw	r30, r24
 268:	7b 01       	movw	r14, r22
 26a:	6a 01       	movw	r12, r20
 26c:	59 01       	movw	r10, r18
char ch;

ch =((H[0]-'0')<<4)+(H[1]-'0');
rtc_write(0xd0,0x02,ch);//HH
 26e:	41 81       	ldd	r20, Z+1	; 0x01
 270:	40 53       	subi	r20, 0x30	; 48
 272:	80 81       	ld	r24, Z
 274:	82 95       	swap	r24
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	48 0f       	add	r20, r24
 27a:	80 ed       	ldi	r24, 0xD0	; 208
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	4e df       	rcall	.-356    	; 0x11c <rtc_write>

ch =((M[0]-'0')<<4)+(M[1]-'0');
rtc_write(0xd0,0x01,ch);//MM
 280:	f7 01       	movw	r30, r14
 282:	41 81       	ldd	r20, Z+1	; 0x01
 284:	40 53       	subi	r20, 0x30	; 48
 286:	80 81       	ld	r24, Z
 288:	82 95       	swap	r24
 28a:	80 7f       	andi	r24, 0xF0	; 240
 28c:	48 0f       	add	r20, r24
 28e:	80 ed       	ldi	r24, 0xD0	; 208
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	44 df       	rcall	.-376    	; 0x11c <rtc_write>

rtc_write(0xd0,0x00,0x00);//SS
 294:	80 ed       	ldi	r24, 0xD0	; 208
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	40 df       	rcall	.-384    	; 0x11c <rtc_write>

ch =((d[0]-'0')<<4)+(d[1]-'0');
rtc_write(0xd0,0x04,ch);//dd
 29c:	f6 01       	movw	r30, r12
 29e:	41 81       	ldd	r20, Z+1	; 0x01
 2a0:	40 53       	subi	r20, 0x30	; 48
 2a2:	80 81       	ld	r24, Z
 2a4:	82 95       	swap	r24
 2a6:	80 7f       	andi	r24, 0xF0	; 240
 2a8:	48 0f       	add	r20, r24
 2aa:	80 ed       	ldi	r24, 0xD0	; 208
 2ac:	64 e0       	ldi	r22, 0x04	; 4
 2ae:	36 df       	rcall	.-404    	; 0x11c <rtc_write>

ch =((m[0]-'0')<<4)+(m[1]-'0');
rtc_write(0xd0,0x05,ch);//mm
 2b0:	f5 01       	movw	r30, r10
 2b2:	41 81       	ldd	r20, Z+1	; 0x01
 2b4:	40 53       	subi	r20, 0x30	; 48
 2b6:	80 81       	ld	r24, Z
 2b8:	82 95       	swap	r24
 2ba:	80 7f       	andi	r24, 0xF0	; 240
 2bc:	48 0f       	add	r20, r24
 2be:	80 ed       	ldi	r24, 0xD0	; 208
 2c0:	65 e0       	ldi	r22, 0x05	; 5
 2c2:	2c df       	rcall	.-424    	; 0x11c <rtc_write>

ch =((y[0]-'0')<<4)+(y[1]-'0');
rtc_write(0xd0,0x06,ch);//yr
 2c4:	f8 01       	movw	r30, r16
 2c6:	41 81       	ldd	r20, Z+1	; 0x01
 2c8:	40 53       	subi	r20, 0x30	; 48
 2ca:	80 81       	ld	r24, Z
 2cc:	82 95       	swap	r24
 2ce:	80 7f       	andi	r24, 0xF0	; 240
 2d0:	48 0f       	add	r20, r24
 2d2:	80 ed       	ldi	r24, 0xD0	; 208
 2d4:	66 e0       	ldi	r22, 0x06	; 6
 2d6:	22 df       	rcall	.-444    	; 0x11c <rtc_write>
}
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	df 90       	pop	r13
 2e2:	cf 90       	pop	r12
 2e4:	bf 90       	pop	r11
 2e6:	af 90       	pop	r10
 2e8:	08 95       	ret

000002ea <devswit>:
}
}
//============================================================================================================================

void devswit( uint8_t did,uint8_t onoff)	//first argument is device id and second argument is on or off command
{
 2ea:	38 2f       	mov	r19, r24
if(onoff==1)
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	59 f4       	brne	.+22     	; 0x306 <devswit+0x1c>
{
PORTB|=(1<<did);
 2f0:	28 b3       	in	r18, 0x18	; 24
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <devswit+0x12>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	3a 95       	dec	r19
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <devswit+0xe>
 300:	28 2b       	or	r18, r24
 302:	28 bb       	out	0x18, r18	; 24
 304:	08 95       	ret
}
else if(onoff==0)
 306:	66 23       	and	r22, r22
 308:	59 f4       	brne	.+22     	; 0x320 <devswit+0x36>
{
PORTB&=~(1<<did);
 30a:	28 b3       	in	r18, 0x18	; 24
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <devswit+0x2c>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	3a 95       	dec	r19
 318:	e2 f7       	brpl	.-8      	; 0x312 <devswit+0x28>
 31a:	80 95       	com	r24
 31c:	82 23       	and	r24, r18
 31e:	88 bb       	out	0x18, r24	; 24
 320:	08 95       	ret

00000322 <shut_down>:
}
//============================================================================================================================

void shut_down()
{
devswit(SSDN,1);
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	e1 df       	rcall	.-62     	; 0x2ea <devswit>
devswit(SACT,0);
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	de df       	rcall	.-68     	; 0x2ea <devswit>
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	9f ef       	ldi	r25, 0xFF	; 255
 332:	29 e1       	ldi	r18, 0x19	; 25
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	f9 01       	movw	r30, r18
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <shut_down+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33e:	d9 f7       	brne	.-10     	; 0x336 <shut_down+0x14>
_delay_ms(50000);
devswit(SRLY,0);
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	d2 df       	rcall	.-92     	; 0x2ea <devswit>
devswit(PRLY,0);
 346:	85 e0       	ldi	r24, 0x05	; 5
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	cf df       	rcall	.-98     	; 0x2ea <devswit>
}
 34c:	08 95       	ret

0000034e <device_on>:


void device_on()
{
devswit(PRLY,1);
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	cb df       	rcall	.-106    	; 0x2ea <devswit>
 354:	80 e5       	ldi	r24, 0x50	; 80
 356:	93 ec       	ldi	r25, 0xC3	; 195
 358:	29 e1       	ldi	r18, 0x19	; 25
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <device_on+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 362:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 364:	d9 f7       	brne	.-10     	; 0x35c <device_on+0xe>
_delay_ms(5000);
devswit(SSDN,0);
 366:	84 e0       	ldi	r24, 0x04	; 4
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	bf df       	rcall	.-130    	; 0x2ea <devswit>
devswit(SACT,1);
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	bc df       	rcall	.-136    	; 0x2ea <devswit>
devswit(AACT,0);
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	b9 df       	rcall	.-142    	; 0x2ea <devswit>
devswit(SRLY,1);
 378:	86 e0       	ldi	r24, 0x06	; 6
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	b6 df       	rcall	.-148    	; 0x2ea <devswit>
}
 37e:	08 95       	ret

00000380 <alm_mode>:
//============================================================================================================================

void alm_mode(uint8_t md)
{
if(md=='1')
 380:	81 33       	cpi	r24, 0x31	; 49
 382:	39 f4       	brne	.+14     	; 0x392 <alm_mode+0x12>
{
devswit(AACT,1);
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	b0 df       	rcall	.-160    	; 0x2ea <devswit>
UART_txs("#ALL MODULE&ALM*");
 38a:	80 e6       	ldi	r24, 0x60	; 96
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	77 de       	rcall	.-786    	; 0x7e <UART_txs>
 390:	08 95       	ret
}
else if(md=='0')
 392:	80 33       	cpi	r24, 0x30	; 48
 394:	31 f4       	brne	.+12     	; 0x3a2 <alm_mode+0x22>
{
devswit(AACT,0);
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	a7 df       	rcall	.-178    	; 0x2ea <devswit>
UART_txs("#ALL MODULE&NRM*");
 39c:	81 e7       	ldi	r24, 0x71	; 113
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	6e de       	rcall	.-804    	; 0x7e <UART_txs>
 3a2:	08 95       	ret

000003a4 <conn>:
}
}
//============================================================================================================================

void conn()	// Switch onn a module
{
 3a4:	df 93       	push	r29
 3a6:	cf 93       	push	r28
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	2a 97       	sbiw	r28, 0x0a	; 10
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	fe 01       	movw	r30, r28
 3ba:	31 96       	adiw	r30, 0x01	; 1
uint8_t c=0,r[10];
while(c<10)
 3bc:	9e 01       	movw	r18, r28
 3be:	25 5f       	subi	r18, 0xF5	; 245
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 3c2:	5f 9b       	sbis	0x0b, 7	; 11
 3c4:	fe cf       	rjmp	.-4      	; 0x3c2 <conn+0x1e>
return(UDR);
 3c6:	8c b1       	in	r24, 0x0c	; 12
{
r[c]=UART_rx();
 3c8:	81 93       	st	Z+, r24
//============================================================================================================================

void conn()	// Switch onn a module
{
uint8_t c=0,r[10];
while(c<10)
 3ca:	e2 17       	cp	r30, r18
 3cc:	f3 07       	cpc	r31, r19
 3ce:	c9 f7       	brne	.-14     	; 0x3c2 <conn+0x1e>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 3d0:	5f 9b       	sbis	0x0b, 7	; 11
 3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <conn+0x2c>
return(UDR);
 3d4:	8c b1       	in	r24, 0x0c	; 12
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 3d6:	83 e2       	ldi	r24, 0x23	; 35
 3d8:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 3da:	5d 9b       	sbis	0x0b, 5	; 11
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <conn+0x36>
r[c]=UART_rx();
c++;
}
c=UART_rx();
UART_tx('#');
UART_txsl(r,10);
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	6a e0       	ldi	r22, 0x0A	; 10
 3e4:	5f de       	rcall	.-834    	; 0xa4 <UART_txsl>
UART_txs("&ONN*");
 3e6:	82 e8       	ldi	r24, 0x82	; 130
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	49 de       	rcall	.-878    	; 0x7e <UART_txs>
}
 3ec:	2a 96       	adiw	r28, 0x0a	; 10
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	cf 91       	pop	r28
 3fa:	df 91       	pop	r29
 3fc:	08 95       	ret

000003fe <coff>:

void coff()	// Switch off a module
{
 3fe:	df 93       	push	r29
 400:	cf 93       	push	r28
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	2a 97       	sbiw	r28, 0x0a	; 10
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	fe 01       	movw	r30, r28
 414:	31 96       	adiw	r30, 0x01	; 1
uint8_t c=0,r[10];
while(c<10)
 416:	9e 01       	movw	r18, r28
 418:	25 5f       	subi	r18, 0xF5	; 245
 41a:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 41c:	5f 9b       	sbis	0x0b, 7	; 11
 41e:	fe cf       	rjmp	.-4      	; 0x41c <coff+0x1e>
return(UDR);
 420:	8c b1       	in	r24, 0x0c	; 12
{
r[c]=UART_rx();
 422:	81 93       	st	Z+, r24
}

void coff()	// Switch off a module
{
uint8_t c=0,r[10];
while(c<10)
 424:	e2 17       	cp	r30, r18
 426:	f3 07       	cpc	r31, r19
 428:	c9 f7       	brne	.-14     	; 0x41c <coff+0x1e>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 42a:	5f 9b       	sbis	0x0b, 7	; 11
 42c:	fe cf       	rjmp	.-4      	; 0x42a <coff+0x2c>
return(UDR);
 42e:	8c b1       	in	r24, 0x0c	; 12
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 430:	83 e2       	ldi	r24, 0x23	; 35
 432:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 434:	5d 9b       	sbis	0x0b, 5	; 11
 436:	fe cf       	rjmp	.-4      	; 0x434 <coff+0x36>
r[c]=UART_rx();
c++;
}
c=UART_rx();
UART_tx('#');
UART_txsl(r,10);
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	6a e0       	ldi	r22, 0x0A	; 10
 43e:	32 de       	rcall	.-924    	; 0xa4 <UART_txsl>
UART_txs("&OFF*");
 440:	88 e8       	ldi	r24, 0x88	; 136
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	1c de       	rcall	.-968    	; 0x7e <UART_txs>
}
 446:	2a 96       	adiw	r28, 0x0a	; 10
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	cf 91       	pop	r28
 454:	df 91       	pop	r29
 456:	08 95       	ret

00000458 <time_set>:
rom_update();
}
//============================================================================================================================

void time_set()	// Set rtc time & date
{
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	df 93       	push	r29
 45e:	cf 93       	push	r28
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	2c 97       	sbiw	r28, 0x0c	; 12
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	fe 01       	movw	r30, r28
 472:	31 96       	adiw	r30, 0x01	; 1
uint8_t hr[2],mi[2],da[2],mo[2],yr[4],c=0;
while(c<2)
 474:	9e 01       	movw	r18, r28
 476:	2d 5f       	subi	r18, 0xFD	; 253
 478:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 47a:	5f 9b       	sbis	0x0b, 7	; 11
 47c:	fe cf       	rjmp	.-4      	; 0x47a <__stack+0x1b>
return(UDR);
 47e:	8c b1       	in	r24, 0x0c	; 12
{
hr[c]=UART_rx();
 480:	81 93       	st	Z+, r24
//============================================================================================================================

void time_set()	// Set rtc time & date
{
uint8_t hr[2],mi[2],da[2],mo[2],yr[4],c=0;
while(c<2)
 482:	e2 17       	cp	r30, r18
 484:	f3 07       	cpc	r31, r19
 486:	c9 f7       	brne	.-14     	; 0x47a <__stack+0x1b>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 488:	5f 9b       	sbis	0x0b, 7	; 11
 48a:	fe cf       	rjmp	.-4      	; 0x488 <__stack+0x29>
return(UDR);
 48c:	8c b1       	in	r24, 0x0c	; 12
 48e:	fe 01       	movw	r30, r28
 490:	33 96       	adiw	r30, 0x03	; 3
hr[c]=UART_rx();
c++;
}
c=UART_rx();
c=0;
while(c<2)
 492:	9e 01       	movw	r18, r28
 494:	2b 5f       	subi	r18, 0xFB	; 251
 496:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 498:	5f 9b       	sbis	0x0b, 7	; 11
 49a:	fe cf       	rjmp	.-4      	; 0x498 <__stack+0x39>
return(UDR);
 49c:	8c b1       	in	r24, 0x0c	; 12
{
mi[c]=UART_rx();
 49e:	81 93       	st	Z+, r24
hr[c]=UART_rx();
c++;
}
c=UART_rx();
c=0;
while(c<2)
 4a0:	e2 17       	cp	r30, r18
 4a2:	f3 07       	cpc	r31, r19
 4a4:	c9 f7       	brne	.-14     	; 0x498 <__stack+0x39>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 4a6:	5f 9b       	sbis	0x0b, 7	; 11
 4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <__stack+0x47>
return(UDR);
 4aa:	8c b1       	in	r24, 0x0c	; 12
 4ac:	fe 01       	movw	r30, r28
 4ae:	35 96       	adiw	r30, 0x05	; 5
mi[c]=UART_rx();
c++;
}
c=UART_rx();
c=0;
while(c<2)
 4b0:	9e 01       	movw	r18, r28
 4b2:	29 5f       	subi	r18, 0xF9	; 249
 4b4:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 4b6:	5f 9b       	sbis	0x0b, 7	; 11
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <__stack+0x57>
return(UDR);
 4ba:	8c b1       	in	r24, 0x0c	; 12
{
da[c]=UART_rx();
 4bc:	81 93       	st	Z+, r24
mi[c]=UART_rx();
c++;
}
c=UART_rx();
c=0;
while(c<2)
 4be:	e2 17       	cp	r30, r18
 4c0:	f3 07       	cpc	r31, r19
 4c2:	c9 f7       	brne	.-14     	; 0x4b6 <__stack+0x57>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 4c4:	5f 9b       	sbis	0x0b, 7	; 11
 4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <__stack+0x65>
return(UDR);
 4c8:	8c b1       	in	r24, 0x0c	; 12
 4ca:	fe 01       	movw	r30, r28
 4cc:	37 96       	adiw	r30, 0x07	; 7
da[c]=UART_rx();
c++;
}
c=UART_rx();
c=0;
while(c<2)
 4ce:	9e 01       	movw	r18, r28
 4d0:	27 5f       	subi	r18, 0xF7	; 247
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 4d4:	5f 9b       	sbis	0x0b, 7	; 11
 4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <__stack+0x75>
return(UDR);
 4d8:	8c b1       	in	r24, 0x0c	; 12
{
mo[c]=UART_rx();
 4da:	81 93       	st	Z+, r24
da[c]=UART_rx();
c++;
}
c=UART_rx();
c=0;
while(c<2)
 4dc:	e2 17       	cp	r30, r18
 4de:	f3 07       	cpc	r31, r19
 4e0:	c9 f7       	brne	.-14     	; 0x4d4 <__stack+0x75>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 4e2:	5f 9b       	sbis	0x0b, 7	; 11
 4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <__stack+0x83>
return(UDR);
 4e6:	8c b1       	in	r24, 0x0c	; 12
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 4e8:	5f 9b       	sbis	0x0b, 7	; 11
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <__stack+0x89>
return(UDR);
 4ec:	8c b1       	in	r24, 0x0c	; 12
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 4ee:	5f 9b       	sbis	0x0b, 7	; 11
 4f0:	fe cf       	rjmp	.-4      	; 0x4ee <__stack+0x8f>
return(UDR);
 4f2:	8c b1       	in	r24, 0x0c	; 12
 4f4:	fe 01       	movw	r30, r28
 4f6:	39 96       	adiw	r30, 0x09	; 9
}
c=UART_rx();
c=UART_rx();
c=UART_rx();
c=0;
while(c<2)
 4f8:	9e 01       	movw	r18, r28
 4fa:	25 5f       	subi	r18, 0xF5	; 245
 4fc:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 4fe:	5f 9b       	sbis	0x0b, 7	; 11
 500:	fe cf       	rjmp	.-4      	; 0x4fe <__stack+0x9f>
return(UDR);
 502:	8c b1       	in	r24, 0x0c	; 12
{
yr[c]=UART_rx();
 504:	81 93       	st	Z+, r24
}
c=UART_rx();
c=UART_rx();
c=UART_rx();
c=0;
while(c<2)
 506:	e2 17       	cp	r30, r18
 508:	f3 07       	cpc	r31, r19
 50a:	c9 f7       	brne	.-14     	; 0x4fe <__stack+0x9f>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 50c:	5f 9b       	sbis	0x0b, 7	; 11
 50e:	fe cf       	rjmp	.-4      	; 0x50c <__stack+0xad>
return(UDR);
 510:	8c b1       	in	r24, 0x0c	; 12
{
yr[c]=UART_rx();
c++;
}
c=UART_rx();
set_time_date(hr,mi,da,mo,yr);
 512:	ce 01       	movw	r24, r28
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	be 01       	movw	r22, r28
 518:	6d 5f       	subi	r22, 0xFD	; 253
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	ae 01       	movw	r20, r28
 51e:	4b 5f       	subi	r20, 0xFB	; 251
 520:	5f 4f       	sbci	r21, 0xFF	; 255
 522:	9e 01       	movw	r18, r28
 524:	29 5f       	subi	r18, 0xF9	; 249
 526:	3f 4f       	sbci	r19, 0xFF	; 255
 528:	8e 01       	movw	r16, r28
 52a:	07 5f       	subi	r16, 0xF7	; 247
 52c:	1f 4f       	sbci	r17, 0xFF	; 255
 52e:	93 de       	rcall	.-730    	; 0x256 <set_time_date>
}
 530:	2c 96       	adiw	r28, 0x0c	; 12
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	cf 91       	pop	r28
 53e:	df 91       	pop	r29
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	08 95       	ret

00000546 <time_tx>:
//============================================================================================================================
void time_tx()
{
get_time_date();
 546:	38 de       	rcall	.-912    	; 0x1b8 <get_time_date>
UART_txs("#TCH MODULE&DTM");
 548:	8e e8       	ldi	r24, 0x8E	; 142
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	98 dd       	rcall	.-1232   	; 0x7e <UART_txs>
UART_txsl(HH,2);
 54e:	8c ef       	ldi	r24, 0xFC	; 252
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	a7 dd       	rcall	.-1202   	; 0xa4 <UART_txsl>
UART_txsl(MM,2);
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	62 e0       	ldi	r22, 0x02	; 2
 55c:	a3 dd       	rcall	.-1210   	; 0xa4 <UART_txsl>
UART_txsl(dd,2);
 55e:	8e ef       	ldi	r24, 0xFE	; 254
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	9f dd       	rcall	.-1218   	; 0xa4 <UART_txsl>
UART_txsl(mm,2);
 566:	8f ec       	ldi	r24, 0xCF	; 207
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	62 e0       	ldi	r22, 0x02	; 2
 56c:	9b dd       	rcall	.-1226   	; 0xa4 <UART_txsl>
UART_txsl(yr,2);
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	62 e0       	ldi	r22, 0x02	; 2
 574:	97 dd       	rcall	.-1234   	; 0xa4 <UART_txsl>
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 576:	8a e2       	ldi	r24, 0x2A	; 42
 578:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 57a:	5d 9b       	sbis	0x0b, 5	; 11
 57c:	fe cf       	rjmp	.-4      	; 0x57a <time_tx+0x34>
UART_tx('*');
}
 57e:	08 95       	ret

00000580 <time_act>:
UART_tx('*');
}
//============================================================================================================================

void time_act()	// Activate timed device
{
 580:	cf 92       	push	r12
 582:	df 92       	push	r13
 584:	ef 92       	push	r14
 586:	ff 92       	push	r15
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
get_time_date();
 58c:	15 de       	rcall	.-982    	; 0x1b8 <get_time_date>
uint8_t c=0,t[4],x;
t[0]=HH[0];
 58e:	d0 90 fc 00 	lds	r13, 0x00FC
t[1]=HH[1];
 592:	e0 90 fd 00 	lds	r14, 0x00FD
t[2]=MM[0];
 596:	f0 90 02 01 	lds	r15, 0x0102
t[3]=MM[1];
 59a:	00 91 03 01 	lds	r16, 0x0103
 59e:	10 e0       	ldi	r17, 0x00	; 0
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 5a0:	53 e2       	ldi	r21, 0x23	; 35
 5a2:	c5 2e       	mov	r12, r21
 5a4:	78 c0       	rjmp	.+240    	; 0x696 <time_act+0x116>
while(c<nos)
{
x=c*4;
 5a6:	21 2f       	mov	r18, r17
 5a8:	30 e0       	ldi	r19, 0x00	; 0
if(t_onn[x]==t[0]&&t_onn[x+1]==t[1]&&t_onn[x+2]==t[2]&&t_onn[x+3]==t[3]&&mode[x]=='T')
 5aa:	81 2f       	mov	r24, r17
 5ac:	88 0f       	add	r24, r24
 5ae:	88 0f       	add	r24, r24
 5b0:	a8 2f       	mov	r26, r24
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	fd 01       	movw	r30, r26
 5b6:	ec 5a       	subi	r30, 0xAC	; 172
 5b8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ba:	80 81       	ld	r24, Z
 5bc:	8d 15       	cp	r24, r13
 5be:	09 f0       	breq	.+2      	; 0x5c2 <time_act+0x42>
 5c0:	69 c0       	rjmp	.+210    	; 0x694 <time_act+0x114>
 5c2:	81 81       	ldd	r24, Z+1	; 0x01
 5c4:	8e 15       	cp	r24, r14
 5c6:	09 f0       	breq	.+2      	; 0x5ca <time_act+0x4a>
 5c8:	65 c0       	rjmp	.+202    	; 0x694 <time_act+0x114>
 5ca:	82 81       	ldd	r24, Z+2	; 0x02
 5cc:	8f 15       	cp	r24, r15
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <time_act+0x52>
 5d0:	61 c0       	rjmp	.+194    	; 0x694 <time_act+0x114>
 5d2:	83 81       	ldd	r24, Z+3	; 0x03
 5d4:	80 17       	cp	r24, r16
 5d6:	09 f0       	breq	.+2      	; 0x5da <time_act+0x5a>
 5d8:	5d c0       	rjmp	.+186    	; 0x694 <time_act+0x114>
 5da:	a8 51       	subi	r26, 0x18	; 24
 5dc:	bf 4f       	sbci	r27, 0xFF	; 255
 5de:	8c 91       	ld	r24, X
 5e0:	84 35       	cpi	r24, 0x54	; 84
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <time_act+0x66>
 5e4:	57 c0       	rjmp	.+174    	; 0x694 <time_act+0x114>
 5e6:	cc b8       	out	0x0c, r12	; 12
while(!(UCSRA&(1<<UDRE)));
 5e8:	5d 9b       	sbis	0x0b, 5	; 11
 5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <time_act+0x68>
{
x=c*10;
UART_tx('#');
UART_tx(name[x]);
 5ec:	c9 01       	movw	r24, r18
 5ee:	43 e0       	ldi	r20, 0x03	; 3
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	4a 95       	dec	r20
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <time_act+0x70>
 5f8:	22 0f       	add	r18, r18
 5fa:	33 1f       	adc	r19, r19
 5fc:	82 0f       	add	r24, r18
 5fe:	a8 2f       	mov	r26, r24
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	fd 01       	movw	r30, r26
 604:	ea 55       	subi	r30, 0x5A	; 90
 606:	fe 4f       	sbci	r31, 0xFE	; 254
 608:	80 81       	ld	r24, Z
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 60a:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 60c:	5d 9b       	sbis	0x0b, 5	; 11
 60e:	fe cf       	rjmp	.-4      	; 0x60c <time_act+0x8c>
UART_tx(name[x+1]);
 610:	fd 01       	movw	r30, r26
 612:	ea 55       	subi	r30, 0x5A	; 90
 614:	fe 4f       	sbci	r31, 0xFE	; 254
 616:	81 81       	ldd	r24, Z+1	; 0x01
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 618:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 61a:	5d 9b       	sbis	0x0b, 5	; 11
 61c:	fe cf       	rjmp	.-4      	; 0x61a <time_act+0x9a>
UART_tx(name[x+2]);
 61e:	fd 01       	movw	r30, r26
 620:	ea 55       	subi	r30, 0x5A	; 90
 622:	fe 4f       	sbci	r31, 0xFE	; 254
 624:	82 81       	ldd	r24, Z+2	; 0x02
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 626:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 628:	5d 9b       	sbis	0x0b, 5	; 11
 62a:	fe cf       	rjmp	.-4      	; 0x628 <time_act+0xa8>
UART_tx(name[x+3]);
 62c:	fd 01       	movw	r30, r26
 62e:	ea 55       	subi	r30, 0x5A	; 90
 630:	fe 4f       	sbci	r31, 0xFE	; 254
 632:	83 81       	ldd	r24, Z+3	; 0x03
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 634:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 636:	5d 9b       	sbis	0x0b, 5	; 11
 638:	fe cf       	rjmp	.-4      	; 0x636 <time_act+0xb6>
UART_tx(name[x+4]);
 63a:	fd 01       	movw	r30, r26
 63c:	ea 55       	subi	r30, 0x5A	; 90
 63e:	fe 4f       	sbci	r31, 0xFE	; 254
 640:	84 81       	ldd	r24, Z+4	; 0x04
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 642:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 644:	5d 9b       	sbis	0x0b, 5	; 11
 646:	fe cf       	rjmp	.-4      	; 0x644 <time_act+0xc4>
UART_tx(name[x+5]);
 648:	fd 01       	movw	r30, r26
 64a:	ea 55       	subi	r30, 0x5A	; 90
 64c:	fe 4f       	sbci	r31, 0xFE	; 254
 64e:	85 81       	ldd	r24, Z+5	; 0x05
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 650:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 652:	5d 9b       	sbis	0x0b, 5	; 11
 654:	fe cf       	rjmp	.-4      	; 0x652 <time_act+0xd2>
UART_tx(name[x+6]);
 656:	fd 01       	movw	r30, r26
 658:	ea 55       	subi	r30, 0x5A	; 90
 65a:	fe 4f       	sbci	r31, 0xFE	; 254
 65c:	86 81       	ldd	r24, Z+6	; 0x06
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 65e:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 660:	5d 9b       	sbis	0x0b, 5	; 11
 662:	fe cf       	rjmp	.-4      	; 0x660 <time_act+0xe0>
UART_tx(name[x+7]);
 664:	fd 01       	movw	r30, r26
 666:	ea 55       	subi	r30, 0x5A	; 90
 668:	fe 4f       	sbci	r31, 0xFE	; 254
 66a:	87 81       	ldd	r24, Z+7	; 0x07
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 66c:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 66e:	5d 9b       	sbis	0x0b, 5	; 11
 670:	fe cf       	rjmp	.-4      	; 0x66e <time_act+0xee>
UART_tx(name[x+8]);
 672:	fd 01       	movw	r30, r26
 674:	ea 55       	subi	r30, 0x5A	; 90
 676:	fe 4f       	sbci	r31, 0xFE	; 254
 678:	80 85       	ldd	r24, Z+8	; 0x08
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 67a:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 67c:	5d 9b       	sbis	0x0b, 5	; 11
 67e:	fe cf       	rjmp	.-4      	; 0x67c <time_act+0xfc>
UART_tx(name[x+9]);
 680:	aa 55       	subi	r26, 0x5A	; 90
 682:	be 4f       	sbci	r27, 0xFE	; 254
 684:	19 96       	adiw	r26, 0x09	; 9
 686:	8c 91       	ld	r24, X
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 688:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 68a:	5d 9b       	sbis	0x0b, 5	; 11
 68c:	fe cf       	rjmp	.-4      	; 0x68a <time_act+0x10a>
UART_txs("&ONN*");
 68e:	82 e8       	ldi	r24, 0x82	; 130
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	f5 dc       	rcall	.-1558   	; 0x7e <UART_txs>
}
c++;
 694:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t c=0,t[4],x;
t[0]=HH[0];
t[1]=HH[1];
t[2]=MM[0];
t[3]=MM[1];
while(c<nos)
 696:	80 91 e5 00 	lds	r24, 0x00E5
 69a:	18 17       	cp	r17, r24
 69c:	08 f4       	brcc	.+2      	; 0x6a0 <time_act+0x120>
 69e:	83 cf       	rjmp	.-250    	; 0x5a6 <time_act+0x26>
UART_tx(name[x+9]);
UART_txs("&ONN*");
}
c++;
}
}
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	ef 90       	pop	r14
 6a8:	df 90       	pop	r13
 6aa:	cf 90       	pop	r12
 6ac:	08 95       	ret

000006ae <time_deact>:

void time_deact()	//Deactivate timed device
{
 6ae:	cf 92       	push	r12
 6b0:	df 92       	push	r13
 6b2:	ef 92       	push	r14
 6b4:	ff 92       	push	r15
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
get_time_date();
 6ba:	7e dd       	rcall	.-1284   	; 0x1b8 <get_time_date>
uint8_t c=0,t[4],x;
t[0]=HH[0];
 6bc:	d0 90 fc 00 	lds	r13, 0x00FC
t[1]=HH[1];
 6c0:	e0 90 fd 00 	lds	r14, 0x00FD
t[2]=MM[0];
 6c4:	f0 90 02 01 	lds	r15, 0x0102
t[3]=MM[1];
 6c8:	00 91 03 01 	lds	r16, 0x0103
 6cc:	10 e0       	ldi	r17, 0x00	; 0
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 6ce:	e3 e2       	ldi	r30, 0x23	; 35
 6d0:	ce 2e       	mov	r12, r30
 6d2:	78 c0       	rjmp	.+240    	; 0x7c4 <time_deact+0x116>
while(c<nos)
{
x=c*4;
 6d4:	21 2f       	mov	r18, r17
 6d6:	30 e0       	ldi	r19, 0x00	; 0
if(t_off[x]==t[0]&&t_off[x+1]==t[1]&&t_off[x+2]==t[2]&&t_off[x+3]==t[3]&&mode[x]=='T')
 6d8:	81 2f       	mov	r24, r17
 6da:	88 0f       	add	r24, r24
 6dc:	88 0f       	add	r24, r24
 6de:	a8 2f       	mov	r26, r24
 6e0:	b0 e0       	ldi	r27, 0x00	; 0
 6e2:	fd 01       	movw	r30, r26
 6e4:	ec 5f       	subi	r30, 0xFC	; 252
 6e6:	fe 4f       	sbci	r31, 0xFE	; 254
 6e8:	80 81       	ld	r24, Z
 6ea:	8d 15       	cp	r24, r13
 6ec:	09 f0       	breq	.+2      	; 0x6f0 <time_deact+0x42>
 6ee:	69 c0       	rjmp	.+210    	; 0x7c2 <time_deact+0x114>
 6f0:	81 81       	ldd	r24, Z+1	; 0x01
 6f2:	8e 15       	cp	r24, r14
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <time_deact+0x4a>
 6f6:	65 c0       	rjmp	.+202    	; 0x7c2 <time_deact+0x114>
 6f8:	82 81       	ldd	r24, Z+2	; 0x02
 6fa:	8f 15       	cp	r24, r15
 6fc:	09 f0       	breq	.+2      	; 0x700 <time_deact+0x52>
 6fe:	61 c0       	rjmp	.+194    	; 0x7c2 <time_deact+0x114>
 700:	83 81       	ldd	r24, Z+3	; 0x03
 702:	80 17       	cp	r24, r16
 704:	09 f0       	breq	.+2      	; 0x708 <time_deact+0x5a>
 706:	5d c0       	rjmp	.+186    	; 0x7c2 <time_deact+0x114>
 708:	a8 51       	subi	r26, 0x18	; 24
 70a:	bf 4f       	sbci	r27, 0xFF	; 255
 70c:	8c 91       	ld	r24, X
 70e:	84 35       	cpi	r24, 0x54	; 84
 710:	09 f0       	breq	.+2      	; 0x714 <time_deact+0x66>
 712:	57 c0       	rjmp	.+174    	; 0x7c2 <time_deact+0x114>
 714:	cc b8       	out	0x0c, r12	; 12
while(!(UCSRA&(1<<UDRE)));
 716:	5d 9b       	sbis	0x0b, 5	; 11
 718:	fe cf       	rjmp	.-4      	; 0x716 <time_deact+0x68>
{
x=c*10;
UART_tx('#');
UART_tx(name[x]);
 71a:	c9 01       	movw	r24, r18
 71c:	73 e0       	ldi	r23, 0x03	; 3
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	7a 95       	dec	r23
 724:	e1 f7       	brne	.-8      	; 0x71e <time_deact+0x70>
 726:	22 0f       	add	r18, r18
 728:	33 1f       	adc	r19, r19
 72a:	82 0f       	add	r24, r18
 72c:	a8 2f       	mov	r26, r24
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	fd 01       	movw	r30, r26
 732:	ea 55       	subi	r30, 0x5A	; 90
 734:	fe 4f       	sbci	r31, 0xFE	; 254
 736:	80 81       	ld	r24, Z
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 738:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 73a:	5d 9b       	sbis	0x0b, 5	; 11
 73c:	fe cf       	rjmp	.-4      	; 0x73a <time_deact+0x8c>
UART_tx(name[x+1]);
 73e:	fd 01       	movw	r30, r26
 740:	ea 55       	subi	r30, 0x5A	; 90
 742:	fe 4f       	sbci	r31, 0xFE	; 254
 744:	81 81       	ldd	r24, Z+1	; 0x01
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 746:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 748:	5d 9b       	sbis	0x0b, 5	; 11
 74a:	fe cf       	rjmp	.-4      	; 0x748 <time_deact+0x9a>
UART_tx(name[x+2]);
 74c:	fd 01       	movw	r30, r26
 74e:	ea 55       	subi	r30, 0x5A	; 90
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	82 81       	ldd	r24, Z+2	; 0x02
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 754:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 756:	5d 9b       	sbis	0x0b, 5	; 11
 758:	fe cf       	rjmp	.-4      	; 0x756 <time_deact+0xa8>
UART_tx(name[x+3]);
 75a:	fd 01       	movw	r30, r26
 75c:	ea 55       	subi	r30, 0x5A	; 90
 75e:	fe 4f       	sbci	r31, 0xFE	; 254
 760:	83 81       	ldd	r24, Z+3	; 0x03
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 762:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 764:	5d 9b       	sbis	0x0b, 5	; 11
 766:	fe cf       	rjmp	.-4      	; 0x764 <time_deact+0xb6>
UART_tx(name[x+4]);
 768:	fd 01       	movw	r30, r26
 76a:	ea 55       	subi	r30, 0x5A	; 90
 76c:	fe 4f       	sbci	r31, 0xFE	; 254
 76e:	84 81       	ldd	r24, Z+4	; 0x04
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 770:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 772:	5d 9b       	sbis	0x0b, 5	; 11
 774:	fe cf       	rjmp	.-4      	; 0x772 <time_deact+0xc4>
UART_tx(name[x+5]);
 776:	fd 01       	movw	r30, r26
 778:	ea 55       	subi	r30, 0x5A	; 90
 77a:	fe 4f       	sbci	r31, 0xFE	; 254
 77c:	85 81       	ldd	r24, Z+5	; 0x05
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 77e:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 780:	5d 9b       	sbis	0x0b, 5	; 11
 782:	fe cf       	rjmp	.-4      	; 0x780 <time_deact+0xd2>
UART_tx(name[x+6]);
 784:	fd 01       	movw	r30, r26
 786:	ea 55       	subi	r30, 0x5A	; 90
 788:	fe 4f       	sbci	r31, 0xFE	; 254
 78a:	86 81       	ldd	r24, Z+6	; 0x06
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 78c:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 78e:	5d 9b       	sbis	0x0b, 5	; 11
 790:	fe cf       	rjmp	.-4      	; 0x78e <time_deact+0xe0>
UART_tx(name[x+7]);
 792:	fd 01       	movw	r30, r26
 794:	ea 55       	subi	r30, 0x5A	; 90
 796:	fe 4f       	sbci	r31, 0xFE	; 254
 798:	87 81       	ldd	r24, Z+7	; 0x07
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 79a:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 79c:	5d 9b       	sbis	0x0b, 5	; 11
 79e:	fe cf       	rjmp	.-4      	; 0x79c <time_deact+0xee>
UART_tx(name[x+8]);
 7a0:	fd 01       	movw	r30, r26
 7a2:	ea 55       	subi	r30, 0x5A	; 90
 7a4:	fe 4f       	sbci	r31, 0xFE	; 254
 7a6:	80 85       	ldd	r24, Z+8	; 0x08
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 7a8:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 7aa:	5d 9b       	sbis	0x0b, 5	; 11
 7ac:	fe cf       	rjmp	.-4      	; 0x7aa <time_deact+0xfc>
UART_tx(name[x+9]);
 7ae:	aa 55       	subi	r26, 0x5A	; 90
 7b0:	be 4f       	sbci	r27, 0xFE	; 254
 7b2:	19 96       	adiw	r26, 0x09	; 9
 7b4:	8c 91       	ld	r24, X
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 7b6:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 7b8:	5d 9b       	sbis	0x0b, 5	; 11
 7ba:	fe cf       	rjmp	.-4      	; 0x7b8 <time_deact+0x10a>
UART_txs("&OFF*");
 7bc:	88 e8       	ldi	r24, 0x88	; 136
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	5e dc       	rcall	.-1860   	; 0x7e <UART_txs>
}
c++;
 7c2:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t c=0,t[4],x;
t[0]=HH[0];
t[1]=HH[1];
t[2]=MM[0];
t[3]=MM[1];
while(c<nos)
 7c4:	80 91 e5 00 	lds	r24, 0x00E5
 7c8:	18 17       	cp	r17, r24
 7ca:	08 f4       	brcc	.+2      	; 0x7ce <time_deact+0x120>
 7cc:	83 cf       	rjmp	.-250    	; 0x6d4 <time_deact+0x26>
UART_tx(name[x+9]);
UART_txs("&OFF*");
}
c++;
}
}
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	ff 90       	pop	r15
 7d4:	ef 90       	pop	r14
 7d6:	df 90       	pop	r13
 7d8:	cf 90       	pop	r12
 7da:	08 95       	ret

000007dc <em_swit>:
//============================================================================================================================

void em_swit()		// Emergencey Mode Enter
{
if(emm==0xFF)
 7dc:	80 91 c8 00 	lds	r24, 0x00C8
 7e0:	8f 3f       	cpi	r24, 0xFF	; 255
 7e2:	51 f4       	brne	.+20     	; 0x7f8 <em_swit+0x1c>
{
devswit(SRLY,0);
 7e4:	86 e0       	ldi	r24, 0x06	; 6
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	80 dd       	rcall	.-1280   	; 0x2ea <devswit>
devswit(SACT,0);
 7ea:	82 e0       	ldi	r24, 0x02	; 2
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	7d dd       	rcall	.-1286   	; 0x2ea <devswit>
devswit(AACT,1);
 7f0:	83 e0       	ldi	r24, 0x03	; 3
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	7a dd       	rcall	.-1292   	; 0x2ea <devswit>
 7f6:	08 95       	ret
}
else if(emm==0x00)
 7f8:	88 23       	and	r24, r24
 7fa:	49 f4       	brne	.+18     	; 0x80e <em_swit+0x32>
{
devswit(SRLY,1);
 7fc:	86 e0       	ldi	r24, 0x06	; 6
 7fe:	61 e0       	ldi	r22, 0x01	; 1
 800:	74 dd       	rcall	.-1304   	; 0x2ea <devswit>
devswit(SACT,1);
 802:	82 e0       	ldi	r24, 0x02	; 2
 804:	61 e0       	ldi	r22, 0x01	; 1
 806:	71 dd       	rcall	.-1310   	; 0x2ea <devswit>
devswit(AACT,0);
 808:	83 e0       	ldi	r24, 0x03	; 3
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	6e dd       	rcall	.-1316   	; 0x2ea <devswit>
 80e:	08 95       	ret

00000810 <en_intr>:

}

void en_intr()
{
DDRD = ~(1<<PD2);		// Set PD2 as input (Using for interupt INT0)
 810:	8b ef       	ldi	r24, 0xFB	; 251
 812:	81 bb       	out	0x11, r24	; 17
PORTD = 1<<PD2;		// Enable PD2 pull-up resistor
 814:	84 e0       	ldi	r24, 0x04	; 4
 816:	82 bb       	out	0x12, r24	; 18
GICR = 1<<INT0;					// Enable INT0
 818:	80 e4       	ldi	r24, 0x40	; 64
 81a:	8b bf       	out	0x3b, r24	; 59
MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
 81c:	83 e0       	ldi	r24, 0x03	; 3
 81e:	85 bf       	out	0x35, r24	; 53
sei();	
 820:	78 94       	sei
}
 822:	08 95       	ret

00000824 <main>:
For initializing UART for Tx-Rx @8Mhz, 9600bps, 8 bit transmission,1 stop bit
*************************************************************************/

void UART_init()
{
UBRRH=0;
 824:	10 bc       	out	0x20, r1	; 32
UBRRL=51;
 826:	83 e3       	ldi	r24, 0x33	; 51
 828:	89 b9       	out	0x09, r24	; 9
UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 82a:	86 e8       	ldi	r24, 0x86	; 134
 82c:	80 bd       	out	0x20, r24	; 32
UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 82e:	88 e9       	ldi	r24, 0x98	; 152
 830:	8a b9       	out	0x0a, r24	; 10
void main()
{
uint8_t a=0;
UART_init();/*
firstrun();*/
sei();
 832:	78 94       	sei
DDRB=0xff;
 834:	8f ef       	ldi	r24, 0xFF	; 255
 836:	87 bb       	out	0x17, r24	; 23
device_on();
 838:	8a dd       	rcall	.-1260   	; 0x34e <device_on>
while(1)
{
get_time_date();
 83a:	be dc       	rcall	.-1668   	; 0x1b8 <get_time_date>
time_act();
 83c:	a1 de       	rcall	.-702    	; 0x580 <time_act>
time_deact();
 83e:	37 df       	rcall	.-402    	; 0x6ae <time_deact>
 840:	80 e1       	ldi	r24, 0x10	; 16
 842:	97 e2       	ldi	r25, 0x27	; 39
 844:	29 e1       	ldi	r18, 0x19	; 25
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	f9 01       	movw	r30, r18
 84a:	31 97       	sbiw	r30, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <main+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 84e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 850:	d9 f7       	brne	.-10     	; 0x848 <main+0x24>
 852:	80 e1       	ldi	r24, 0x10	; 16
 854:	97 e2       	ldi	r25, 0x27	; 39
 856:	f8 cf       	rjmp	.-16     	; 0x848 <main+0x24>

00000858 <rom_update>:
nos=eeprom_read_byte(modnos);
}

void rom_update()
{
eeprom_update_block((const void*)name,(void*)modnm,200);
 858:	86 ea       	ldi	r24, 0xA6	; 166
 85a:	91 e0       	ldi	r25, 0x01	; 1
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	48 ec       	ldi	r20, 0xC8	; 200
 862:	50 e0       	ldi	r21, 0x00	; 0
 864:	77 d3       	rcall	.+1774   	; 0xf54 <__eeupd_block_m8>
eeprom_update_block((const void*)type,(void*)modty,20);
 866:	81 ed       	ldi	r24, 0xD1	; 209
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	68 ec       	ldi	r22, 0xC8	; 200
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	44 e1       	ldi	r20, 0x14	; 20
 870:	50 e0       	ldi	r21, 0x00	; 0
 872:	70 d3       	rcall	.+1760   	; 0xf54 <__eeupd_block_m8>
eeprom_update_block((const void*)mode,(void*)modmo,20);
 874:	88 ee       	ldi	r24, 0xE8	; 232
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	6c ed       	ldi	r22, 0xDC	; 220
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	44 e1       	ldi	r20, 0x14	; 20
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	69 d3       	rcall	.+1746   	; 0xf54 <__eeupd_block_m8>
eeprom_update_block((const void*)t_onn,(void*)modtn,80);
 882:	84 e5       	ldi	r24, 0x54	; 84
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	60 ef       	ldi	r22, 0xF0	; 240
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	40 e5       	ldi	r20, 0x50	; 80
 88c:	50 e0       	ldi	r21, 0x00	; 0
 88e:	62 d3       	rcall	.+1732   	; 0xf54 <__eeupd_block_m8>
eeprom_update_block((const void*)t_off,(void*)modtf,80);
 890:	84 e0       	ldi	r24, 0x04	; 4
 892:	91 e0       	ldi	r25, 0x01	; 1
 894:	60 e4       	ldi	r22, 0x40	; 64
 896:	71 e0       	ldi	r23, 0x01	; 1
 898:	40 e5       	ldi	r20, 0x50	; 80
 89a:	50 e0       	ldi	r21, 0x00	; 0
 89c:	5b d3       	rcall	.+1718   	; 0xf54 <__eeupd_block_m8>
eeprom_update_byte((uint8_t*)modnos,nos);
 89e:	80 91 90 01 	lds	r24, 0x0190
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	60 91 e5 00 	lds	r22, 0x00E5
 8a8:	64 d3       	rcall	.+1736   	; 0xf72 <__eeupd_byte_m8>
}
 8aa:	08 95       	ret

000008ac <vars_update>:
}
//=========================================================================================================================

void vars_update()
{
eeprom_read_block((void*)name, (const void *)modnm, 200);
 8ac:	86 ea       	ldi	r24, 0xA6	; 166
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	48 ec       	ldi	r20, 0xC8	; 200
 8b6:	50 e0       	ldi	r21, 0x00	; 0
 8b8:	35 d3       	rcall	.+1642   	; 0xf24 <__eerd_block_m8>
eeprom_read_block((void*)type, (const void *)modty, 20);
 8ba:	81 ed       	ldi	r24, 0xD1	; 209
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	68 ec       	ldi	r22, 0xC8	; 200
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	44 e1       	ldi	r20, 0x14	; 20
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	2e d3       	rcall	.+1628   	; 0xf24 <__eerd_block_m8>
eeprom_read_block((void*)mode, (const void *)modmo, 20);
 8c8:	88 ee       	ldi	r24, 0xE8	; 232
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	6c ed       	ldi	r22, 0xDC	; 220
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	44 e1       	ldi	r20, 0x14	; 20
 8d2:	50 e0       	ldi	r21, 0x00	; 0
 8d4:	27 d3       	rcall	.+1614   	; 0xf24 <__eerd_block_m8>
eeprom_read_block((void*)t_onn, (const void *)modtn, 80);
 8d6:	84 e5       	ldi	r24, 0x54	; 84
 8d8:	91 e0       	ldi	r25, 0x01	; 1
 8da:	60 ef       	ldi	r22, 0xF0	; 240
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	40 e5       	ldi	r20, 0x50	; 80
 8e0:	50 e0       	ldi	r21, 0x00	; 0
 8e2:	20 d3       	rcall	.+1600   	; 0xf24 <__eerd_block_m8>
eeprom_read_block((void*)t_off, (const void *)modtf, 80);
 8e4:	84 e0       	ldi	r24, 0x04	; 4
 8e6:	91 e0       	ldi	r25, 0x01	; 1
 8e8:	60 e4       	ldi	r22, 0x40	; 64
 8ea:	71 e0       	ldi	r23, 0x01	; 1
 8ec:	40 e5       	ldi	r20, 0x50	; 80
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	19 d3       	rcall	.+1586   	; 0xf24 <__eerd_block_m8>
nos=eeprom_read_byte(modnos);
 8f2:	80 91 90 01 	lds	r24, 0x0190
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	25 d3       	rcall	.+1610   	; 0xf44 <__eerd_byte_m8>
 8fa:	80 93 e5 00 	sts	0x00E5, r24
}
 8fe:	08 95       	ret

00000900 <updt_remote>:
}
//============================================================================================================================

void updt_remote()	// Update remote device
{
vars_update();
 900:	d5 df       	rcall	.-86     	; 0x8ac <vars_update>
UART_txs("#TCH MODULE&UDD&");
 902:	8e e9       	ldi	r24, 0x9E	; 158
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	bb db       	rcall	.-2186   	; 0x7e <UART_txs>
UART_tx(nos);
 908:	80 91 e5 00 	lds	r24, 0x00E5
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 90c:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 90e:	5d 9b       	sbis	0x0b, 5	; 11
 910:	fe cf       	rjmp	.-4      	; 0x90e <updt_remote+0xe>
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 912:	86 e2       	ldi	r24, 0x26	; 38
 914:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 916:	5d 9b       	sbis	0x0b, 5	; 11
 918:	fe cf       	rjmp	.-4      	; 0x916 <updt_remote+0x16>
UART_tx('&');
UART_txsl(name,200);
 91a:	86 ea       	ldi	r24, 0xA6	; 166
 91c:	91 e0       	ldi	r25, 0x01	; 1
 91e:	68 ec       	ldi	r22, 0xC8	; 200
 920:	c1 db       	rcall	.-2174   	; 0xa4 <UART_txsl>
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 922:	86 e2       	ldi	r24, 0x26	; 38
 924:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 926:	5d 9b       	sbis	0x0b, 5	; 11
 928:	fe cf       	rjmp	.-4      	; 0x926 <updt_remote+0x26>
UART_tx('&');
UART_txsl(type,20);
 92a:	81 ed       	ldi	r24, 0xD1	; 209
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	64 e1       	ldi	r22, 0x14	; 20
 930:	b9 db       	rcall	.-2190   	; 0xa4 <UART_txsl>
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 932:	8a e2       	ldi	r24, 0x2A	; 42
 934:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 936:	5d 9b       	sbis	0x0b, 5	; 11
 938:	fe cf       	rjmp	.-4      	; 0x936 <updt_remote+0x36>
UART_tx('*');
}
 93a:	08 95       	ret

0000093c <del_reg>:
nos++;
rom_update();
}

void del_reg()	// delete an existing module
{
 93c:	2f 92       	push	r2
 93e:	3f 92       	push	r3
 940:	4f 92       	push	r4
 942:	5f 92       	push	r5
 944:	6f 92       	push	r6
 946:	7f 92       	push	r7
 948:	8f 92       	push	r8
 94a:	9f 92       	push	r9
 94c:	af 92       	push	r10
 94e:	bf 92       	push	r11
 950:	cf 92       	push	r12
 952:	df 92       	push	r13
 954:	ef 92       	push	r14
 956:	ff 92       	push	r15
 958:	0f 93       	push	r16
 95a:	1f 93       	push	r17
 95c:	df 93       	push	r29
 95e:	cf 93       	push	r28
 960:	cd b7       	in	r28, 0x3d	; 61
 962:	de b7       	in	r29, 0x3e	; 62
 964:	60 97       	sbiw	r28, 0x10	; 16
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	f8 94       	cli
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	cd bf       	out	0x3d, r28	; 61
vars_update();
 970:	9d df       	rcall	.-198    	; 0x8ac <vars_update>
 972:	fe 01       	movw	r30, r28
 974:	31 96       	adiw	r30, 0x01	; 1
uint8_t c,t=0,r[10];
c=0;
while(c<10)
 976:	9e 01       	movw	r18, r28
 978:	25 5f       	subi	r18, 0xF5	; 245
 97a:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 97c:	5f 9b       	sbis	0x0b, 7	; 11
 97e:	fe cf       	rjmp	.-4      	; 0x97c <del_reg+0x40>
return(UDR);
 980:	8c b1       	in	r24, 0x0c	; 12
{
r[c]=UART_rx();
 982:	81 93       	st	Z+, r24
void del_reg()	// delete an existing module
{
vars_update();
uint8_t c,t=0,r[10];
c=0;
while(c<10)
 984:	e2 17       	cp	r30, r18
 986:	f3 07       	cpc	r31, r19
 988:	c9 f7       	brne	.-14     	; 0x97c <del_reg+0x40>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 98a:	5f 9b       	sbis	0x0b, 7	; 11
 98c:	fe cf       	rjmp	.-4      	; 0x98a <del_reg+0x4e>
return(UDR);
 98e:	8c b1       	in	r24, 0x0c	; 12
Use: UART_tx(data_byte);
*************************************************************************/

void UART_tx(uint8_t tx)
{
UDR=tx;
 990:	83 e2       	ldi	r24, 0x23	; 35
 992:	8c b9       	out	0x0c, r24	; 12
while(!(UCSRA&(1<<UDRE)));
 994:	5d 9b       	sbis	0x0b, 5	; 11
 996:	fe cf       	rjmp	.-4      	; 0x994 <del_reg+0x58>
}
c=UART_rx();
c=0;

UART_tx('#');
UART_txsl(r,10);
 998:	ce 01       	movw	r24, r28
 99a:	01 96       	adiw	r24, 0x01	; 1
 99c:	6a e0       	ldi	r22, 0x0A	; 10
 99e:	82 db       	rcall	.-2300   	; 0xa4 <UART_txsl>
UART_txs("&RST*");
 9a0:	8f ea       	ldi	r24, 0xAF	; 175
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	6c db       	rcall	.-2344   	; 0x7e <UART_txs>
while(c<nos)
 9a6:	60 90 e5 00 	lds	r6, 0x00E5
{
if(r[0]==name[c*10]&&r[1]==name[(c*10)+1]&&r[2]==name[(c*10)+2]&&r[3]==name[(c*10)+3]&&r[4]==name[(c*10)+4]&&r[5]==name[(c*10)+5]&&r[6]==name[(c*10)+6]&&r[7]==name[(c*10)+7]&&r[8]==name[(c*10)+8]&&r[9]==name[(c*10)+9])
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	88 8b       	std	Y+16, r24	; 0x10
 9ae:	9a 81       	ldd	r25, Y+2	; 0x02
 9b0:	9f 87       	std	Y+15, r25	; 0x0f
 9b2:	eb 81       	ldd	r30, Y+3	; 0x03
 9b4:	ee 87       	std	Y+14, r30	; 0x0e
 9b6:	fc 81       	ldd	r31, Y+4	; 0x04
 9b8:	fd 87       	std	Y+13, r31	; 0x0d
 9ba:	8d 81       	ldd	r24, Y+5	; 0x05
 9bc:	8c 87       	std	Y+12, r24	; 0x0c
 9be:	9e 81       	ldd	r25, Y+6	; 0x06
 9c0:	9b 87       	std	Y+11, r25	; 0x0b
 9c2:	2f 80       	ldd	r2, Y+7	; 0x07
 9c4:	38 84       	ldd	r3, Y+8	; 0x08
 9c6:	49 84       	ldd	r4, Y+9	; 0x09
 9c8:	5a 84       	ldd	r5, Y+10	; 0x0a
 9ca:	77 24       	eor	r7, r7
 9cc:	10 c1       	rjmp	.+544    	; 0xbee <del_reg+0x2b2>
c=0;

UART_tx('#');
UART_txsl(r,10);
UART_txs("&RST*");
while(c<nos)
 9ce:	8c 91       	ld	r24, X
 9d0:	98 89       	ldd	r25, Y+16	; 0x10
 9d2:	98 17       	cp	r25, r24
 9d4:	e1 f7       	brne	.-8      	; 0x9ce <del_reg+0x92>
{
if(r[0]==name[c*10]&&r[1]==name[(c*10)+1]&&r[2]==name[(c*10)+2]&&r[3]==name[(c*10)+3]&&r[4]==name[(c*10)+4]&&r[5]==name[(c*10)+5]&&r[6]==name[(c*10)+6]&&r[7]==name[(c*10)+7]&&r[8]==name[(c*10)+8]&&r[9]==name[(c*10)+9])
 9d6:	80 81       	ld	r24, Z
 9d8:	9f 85       	ldd	r25, Y+15	; 0x0f
 9da:	98 17       	cp	r25, r24
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <del_reg+0xa4>
 9de:	1a c1       	rjmp	.+564    	; 0xc14 <del_reg+0x2d8>
 9e0:	fa 01       	movw	r30, r20
 9e2:	ee 0f       	add	r30, r30
 9e4:	ff 1f       	adc	r31, r31
 9e6:	ee 0f       	add	r30, r30
 9e8:	ff 1f       	adc	r31, r31
 9ea:	e4 0f       	add	r30, r20
 9ec:	f5 1f       	adc	r31, r21
 9ee:	ee 0f       	add	r30, r30
 9f0:	ff 1f       	adc	r31, r31
 9f2:	e8 55       	subi	r30, 0x58	; 88
 9f4:	fe 4f       	sbci	r31, 0xFE	; 254
 9f6:	80 81       	ld	r24, Z
 9f8:	ee 85       	ldd	r30, Y+14	; 0x0e
 9fa:	e8 17       	cp	r30, r24
 9fc:	09 f0       	breq	.+2      	; 0xa00 <del_reg+0xc4>
 9fe:	f7 c0       	rjmp	.+494    	; 0xbee <del_reg+0x2b2>
 a00:	13 96       	adiw	r26, 0x03	; 3
 a02:	8c 91       	ld	r24, X
 a04:	13 97       	sbiw	r26, 0x03	; 3
 a06:	fd 85       	ldd	r31, Y+13	; 0x0d
 a08:	f8 17       	cp	r31, r24
 a0a:	09 f0       	breq	.+2      	; 0xa0e <del_reg+0xd2>
 a0c:	f0 c0       	rjmp	.+480    	; 0xbee <del_reg+0x2b2>
 a0e:	14 96       	adiw	r26, 0x04	; 4
 a10:	8c 91       	ld	r24, X
 a12:	14 97       	sbiw	r26, 0x04	; 4
 a14:	9c 85       	ldd	r25, Y+12	; 0x0c
 a16:	98 17       	cp	r25, r24
 a18:	09 f0       	breq	.+2      	; 0xa1c <del_reg+0xe0>
 a1a:	e9 c0       	rjmp	.+466    	; 0xbee <del_reg+0x2b2>
 a1c:	15 96       	adiw	r26, 0x05	; 5
 a1e:	8c 91       	ld	r24, X
 a20:	15 97       	sbiw	r26, 0x05	; 5
 a22:	eb 85       	ldd	r30, Y+11	; 0x0b
 a24:	e8 17       	cp	r30, r24
 a26:	09 f0       	breq	.+2      	; 0xa2a <del_reg+0xee>
 a28:	e2 c0       	rjmp	.+452    	; 0xbee <del_reg+0x2b2>
 a2a:	16 96       	adiw	r26, 0x06	; 6
 a2c:	8c 91       	ld	r24, X
 a2e:	16 97       	sbiw	r26, 0x06	; 6
 a30:	28 16       	cp	r2, r24
 a32:	09 f0       	breq	.+2      	; 0xa36 <del_reg+0xfa>
 a34:	dc c0       	rjmp	.+440    	; 0xbee <del_reg+0x2b2>
 a36:	17 96       	adiw	r26, 0x07	; 7
 a38:	8c 91       	ld	r24, X
 a3a:	17 97       	sbiw	r26, 0x07	; 7
 a3c:	38 16       	cp	r3, r24
 a3e:	09 f0       	breq	.+2      	; 0xa42 <del_reg+0x106>
 a40:	d6 c0       	rjmp	.+428    	; 0xbee <del_reg+0x2b2>
 a42:	18 96       	adiw	r26, 0x08	; 8
 a44:	8c 91       	ld	r24, X
 a46:	18 97       	sbiw	r26, 0x08	; 8
 a48:	48 16       	cp	r4, r24
 a4a:	09 f0       	breq	.+2      	; 0xa4e <del_reg+0x112>
 a4c:	d0 c0       	rjmp	.+416    	; 0xbee <del_reg+0x2b2>
 a4e:	19 96       	adiw	r26, 0x09	; 9
 a50:	8c 91       	ld	r24, X
 a52:	58 16       	cp	r5, r24
 a54:	09 f0       	breq	.+2      	; 0xa58 <del_reg+0x11c>
 a56:	cb c0       	rjmp	.+406    	; 0xbee <del_reg+0x2b2>
{
while(c<nos)
{
name[c*10]=name[(c+1)*10];
 a58:	07 2d       	mov	r16, r7
 a5a:	10 e0       	ldi	r17, 0x00	; 0
 a5c:	48 01       	movw	r8, r16
 a5e:	88 0c       	add	r8, r8
 a60:	99 1c       	adc	r9, r9
 a62:	98 01       	movw	r18, r16
 a64:	83 e0       	ldi	r24, 0x03	; 3
 a66:	22 0f       	add	r18, r18
 a68:	33 1f       	adc	r19, r19
 a6a:	8a 95       	dec	r24
 a6c:	e1 f7       	brne	.-8      	; 0xa66 <del_reg+0x12a>
 a6e:	28 0d       	add	r18, r8
 a70:	39 1d       	adc	r19, r9
 a72:	b8 01       	movw	r22, r16
 a74:	6f 5f       	subi	r22, 0xFF	; 255
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	5b 01       	movw	r10, r22
 a7a:	aa 0c       	add	r10, r10
 a7c:	bb 1c       	adc	r11, r11
 a7e:	cb 01       	movw	r24, r22
 a80:	a3 e0       	ldi	r26, 0x03	; 3
 a82:	88 0f       	add	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	aa 95       	dec	r26
 a88:	e1 f7       	brne	.-8      	; 0xa82 <del_reg+0x146>
 a8a:	8a 0d       	add	r24, r10
 a8c:	9b 1d       	adc	r25, r11
 a8e:	2a 55       	subi	r18, 0x5A	; 90
 a90:	3e 4f       	sbci	r19, 0xFE	; 254
 a92:	8a 55       	subi	r24, 0x5A	; 90
 a94:	9e 4f       	sbci	r25, 0xFE	; 254
 a96:	fc 01       	movw	r30, r24
 a98:	40 81       	ld	r20, Z
 a9a:	f9 01       	movw	r30, r18
 a9c:	40 83       	st	Z, r20
name[(c*10)+1]=name[((c+1)*10)+1];
 a9e:	fc 01       	movw	r30, r24
 aa0:	41 81       	ldd	r20, Z+1	; 0x01
 aa2:	f9 01       	movw	r30, r18
 aa4:	41 83       	std	Z+1, r20	; 0x01
name[(c*10)+2]=name[((c+1)*10)+2];
 aa6:	68 01       	movw	r12, r16
 aa8:	cc 0c       	add	r12, r12
 aaa:	dd 1c       	adc	r13, r13
 aac:	cc 0c       	add	r12, r12
 aae:	dd 1c       	adc	r13, r13
 ab0:	d6 01       	movw	r26, r12
 ab2:	a0 0f       	add	r26, r16
 ab4:	b1 1f       	adc	r27, r17
 ab6:	aa 0f       	add	r26, r26
 ab8:	bb 1f       	adc	r27, r27
 aba:	a8 55       	subi	r26, 0x58	; 88
 abc:	be 4f       	sbci	r27, 0xFE	; 254
 abe:	7b 01       	movw	r14, r22
 ac0:	ee 0c       	add	r14, r14
 ac2:	ff 1c       	adc	r15, r15
 ac4:	ee 0c       	add	r14, r14
 ac6:	ff 1c       	adc	r15, r15
 ac8:	f7 01       	movw	r30, r14
 aca:	e6 0f       	add	r30, r22
 acc:	f7 1f       	adc	r31, r23
 ace:	ee 0f       	add	r30, r30
 ad0:	ff 1f       	adc	r31, r31
 ad2:	e8 55       	subi	r30, 0x58	; 88
 ad4:	fe 4f       	sbci	r31, 0xFE	; 254
 ad6:	40 81       	ld	r20, Z
 ad8:	4c 93       	st	X, r20
name[(c*10)+3]=name[((c+1)*10)+3];
 ada:	fc 01       	movw	r30, r24
 adc:	43 81       	ldd	r20, Z+3	; 0x03
 ade:	f9 01       	movw	r30, r18
 ae0:	43 83       	std	Z+3, r20	; 0x03
name[(c*10)+4]=name[((c+1)*10)+4];
 ae2:	fc 01       	movw	r30, r24
 ae4:	44 81       	ldd	r20, Z+4	; 0x04
 ae6:	f9 01       	movw	r30, r18
 ae8:	44 83       	std	Z+4, r20	; 0x04
name[(c*10)+5]=name[((c+1)*10)+5];
 aea:	fc 01       	movw	r30, r24
 aec:	45 81       	ldd	r20, Z+5	; 0x05
 aee:	f9 01       	movw	r30, r18
 af0:	45 83       	std	Z+5, r20	; 0x05
name[(c*10)+6]=name[((c+1)*10)+6];
 af2:	fc 01       	movw	r30, r24
 af4:	46 81       	ldd	r20, Z+6	; 0x06
 af6:	f9 01       	movw	r30, r18
 af8:	46 83       	std	Z+6, r20	; 0x06
name[(c*10)+7]=name[((c+1)*10)+7];
 afa:	fc 01       	movw	r30, r24
 afc:	47 81       	ldd	r20, Z+7	; 0x07
 afe:	f9 01       	movw	r30, r18
 b00:	47 83       	std	Z+7, r20	; 0x07
name[(c*10)+8]=name[((c+1)*10)+8];
 b02:	fc 01       	movw	r30, r24
 b04:	40 85       	ldd	r20, Z+8	; 0x08
 b06:	f9 01       	movw	r30, r18
 b08:	40 87       	std	Z+8, r20	; 0x08
name[(c*10)+9]=name[((c+1)*10)+9];
 b0a:	fc 01       	movw	r30, r24
 b0c:	81 85       	ldd	r24, Z+9	; 0x09
 b0e:	f9 01       	movw	r30, r18
 b10:	81 87       	std	Z+9, r24	; 0x09
type[c]=type[(c+1)];
 b12:	d8 01       	movw	r26, r16
 b14:	af 52       	subi	r26, 0x2F	; 47
 b16:	bf 4f       	sbci	r27, 0xFF	; 255
 b18:	fb 01       	movw	r30, r22
 b1a:	ef 52       	subi	r30, 0x2F	; 47
 b1c:	ff 4f       	sbci	r31, 0xFF	; 255
 b1e:	80 81       	ld	r24, Z
 b20:	8c 93       	st	X, r24
mode[c]=mode[(c+1)];
 b22:	08 51       	subi	r16, 0x18	; 24
 b24:	1f 4f       	sbci	r17, 0xFF	; 255
 b26:	68 51       	subi	r22, 0x18	; 24
 b28:	7f 4f       	sbci	r23, 0xFF	; 255
 b2a:	fb 01       	movw	r30, r22
 b2c:	80 81       	ld	r24, Z
 b2e:	f8 01       	movw	r30, r16
 b30:	80 83       	st	Z, r24
t_onn[c*4]=t_onn[(c+1)*4];
 b32:	d6 01       	movw	r26, r12
 b34:	ac 5a       	subi	r26, 0xAC	; 172
 b36:	be 4f       	sbci	r27, 0xFE	; 254
 b38:	f7 01       	movw	r30, r14
 b3a:	ec 5a       	subi	r30, 0xAC	; 172
 b3c:	fe 4f       	sbci	r31, 0xFE	; 254
 b3e:	80 81       	ld	r24, Z
 b40:	8c 93       	st	X, r24
t_onn[(c*4)+1]=t_onn[((c+1)*4)+1];
 b42:	86 01       	movw	r16, r12
 b44:	0f 5f       	subi	r16, 0xFF	; 255
 b46:	1f 4f       	sbci	r17, 0xFF	; 255
 b48:	b7 01       	movw	r22, r14
 b4a:	6f 5f       	subi	r22, 0xFF	; 255
 b4c:	7f 4f       	sbci	r23, 0xFF	; 255
 b4e:	d8 01       	movw	r26, r16
 b50:	ac 5a       	subi	r26, 0xAC	; 172
 b52:	be 4f       	sbci	r27, 0xFE	; 254
 b54:	fb 01       	movw	r30, r22
 b56:	ec 5a       	subi	r30, 0xAC	; 172
 b58:	fe 4f       	sbci	r31, 0xFE	; 254
 b5a:	80 81       	ld	r24, Z
 b5c:	8c 93       	st	X, r24
t_onn[(c*4)+2]=t_onn[((c+1)*4)+2];
 b5e:	08 94       	sec
 b60:	81 1c       	adc	r8, r1
 b62:	91 1c       	adc	r9, r1
 b64:	88 0c       	add	r8, r8
 b66:	99 1c       	adc	r9, r9
 b68:	08 94       	sec
 b6a:	a1 1c       	adc	r10, r1
 b6c:	b1 1c       	adc	r11, r1
 b6e:	aa 0c       	add	r10, r10
 b70:	bb 1c       	adc	r11, r11
 b72:	d4 01       	movw	r26, r8
 b74:	ac 5a       	subi	r26, 0xAC	; 172
 b76:	be 4f       	sbci	r27, 0xFE	; 254
 b78:	f5 01       	movw	r30, r10
 b7a:	ec 5a       	subi	r30, 0xAC	; 172
 b7c:	fe 4f       	sbci	r31, 0xFE	; 254
 b7e:	80 81       	ld	r24, Z
 b80:	8c 93       	st	X, r24
t_onn[(c*4)+3]=t_onn[((c+1)*4)+3];
 b82:	a6 01       	movw	r20, r12
 b84:	4d 5f       	subi	r20, 0xFD	; 253
 b86:	5f 4f       	sbci	r21, 0xFF	; 255
 b88:	97 01       	movw	r18, r14
 b8a:	2d 5f       	subi	r18, 0xFD	; 253
 b8c:	3f 4f       	sbci	r19, 0xFF	; 255
 b8e:	da 01       	movw	r26, r20
 b90:	ac 5a       	subi	r26, 0xAC	; 172
 b92:	be 4f       	sbci	r27, 0xFE	; 254
 b94:	f9 01       	movw	r30, r18
 b96:	ec 5a       	subi	r30, 0xAC	; 172
 b98:	fe 4f       	sbci	r31, 0xFE	; 254
 b9a:	80 81       	ld	r24, Z
 b9c:	8c 93       	st	X, r24
t_off[c*4]=t_off[(c+1)*4];
 b9e:	84 e0       	ldi	r24, 0x04	; 4
 ba0:	91 e0       	ldi	r25, 0x01	; 1
 ba2:	c8 0e       	add	r12, r24
 ba4:	d9 1e       	adc	r13, r25
 ba6:	e8 0e       	add	r14, r24
 ba8:	f9 1e       	adc	r15, r25
 baa:	f7 01       	movw	r30, r14
 bac:	80 81       	ld	r24, Z
 bae:	f6 01       	movw	r30, r12
 bb0:	80 83       	st	Z, r24
t_off[(c*4)+1]=t_off[((c+1)*4)+1];
 bb2:	0c 5f       	subi	r16, 0xFC	; 252
 bb4:	1e 4f       	sbci	r17, 0xFE	; 254
 bb6:	6c 5f       	subi	r22, 0xFC	; 252
 bb8:	7e 4f       	sbci	r23, 0xFE	; 254
 bba:	fb 01       	movw	r30, r22
 bbc:	80 81       	ld	r24, Z
 bbe:	f8 01       	movw	r30, r16
 bc0:	80 83       	st	Z, r24
t_off[(c*4)+2]=t_off[((c+1)*4)+2];
 bc2:	84 e0       	ldi	r24, 0x04	; 4
 bc4:	91 e0       	ldi	r25, 0x01	; 1
 bc6:	88 0e       	add	r8, r24
 bc8:	99 1e       	adc	r9, r25
 bca:	a8 0e       	add	r10, r24
 bcc:	b9 1e       	adc	r11, r25
 bce:	f5 01       	movw	r30, r10
 bd0:	80 81       	ld	r24, Z
 bd2:	f4 01       	movw	r30, r8
 bd4:	80 83       	st	Z, r24
t_off[(c*4)+3]=t_off[((c+1)*4)+3];
 bd6:	4c 5f       	subi	r20, 0xFC	; 252
 bd8:	5e 4f       	sbci	r21, 0xFE	; 254
 bda:	2c 5f       	subi	r18, 0xFC	; 252
 bdc:	3e 4f       	sbci	r19, 0xFE	; 254
 bde:	f9 01       	movw	r30, r18
 be0:	80 81       	ld	r24, Z
 be2:	fa 01       	movw	r30, r20
 be4:	80 83       	st	Z, r24
c++;
 be6:	73 94       	inc	r7
UART_txs("&RST*");
while(c<nos)
{
if(r[0]==name[c*10]&&r[1]==name[(c*10)+1]&&r[2]==name[(c*10)+2]&&r[3]==name[(c*10)+3]&&r[4]==name[(c*10)+4]&&r[5]==name[(c*10)+5]&&r[6]==name[(c*10)+6]&&r[7]==name[(c*10)+7]&&r[8]==name[(c*10)+8]&&r[9]==name[(c*10)+9])
{
while(c<nos)
 be8:	76 14       	cp	r7, r6
 bea:	08 f4       	brcc	.+2      	; 0xbee <del_reg+0x2b2>
 bec:	35 cf       	rjmp	.-406    	; 0xa58 <del_reg+0x11c>
UART_tx('#');
UART_txsl(r,10);
UART_txs("&RST*");
while(c<nos)
{
if(r[0]==name[c*10]&&r[1]==name[(c*10)+1]&&r[2]==name[(c*10)+2]&&r[3]==name[(c*10)+3]&&r[4]==name[(c*10)+4]&&r[5]==name[(c*10)+5]&&r[6]==name[(c*10)+6]&&r[7]==name[(c*10)+7]&&r[8]==name[(c*10)+8]&&r[9]==name[(c*10)+9])
 bee:	47 2d       	mov	r20, r7
 bf0:	50 e0       	ldi	r21, 0x00	; 0
 bf2:	ca 01       	movw	r24, r20
 bf4:	88 0f       	add	r24, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	9a 01       	movw	r18, r20
 bfa:	f3 e0       	ldi	r31, 0x03	; 3
 bfc:	22 0f       	add	r18, r18
 bfe:	33 1f       	adc	r19, r19
 c00:	fa 95       	dec	r31
 c02:	e1 f7       	brne	.-8      	; 0xbfc <del_reg+0x2c0>
 c04:	82 0f       	add	r24, r18
 c06:	93 1f       	adc	r25, r19
c=0;

UART_tx('#');
UART_txsl(r,10);
UART_txs("&RST*");
while(c<nos)
 c08:	dc 01       	movw	r26, r24
 c0a:	aa 55       	subi	r26, 0x5A	; 90
 c0c:	be 4f       	sbci	r27, 0xFE	; 254
{
if(r[0]==name[c*10]&&r[1]==name[(c*10)+1]&&r[2]==name[(c*10)+2]&&r[3]==name[(c*10)+3]&&r[4]==name[(c*10)+4]&&r[5]==name[(c*10)+5]&&r[6]==name[(c*10)+6]&&r[7]==name[(c*10)+7]&&r[8]==name[(c*10)+8]&&r[9]==name[(c*10)+9])
 c0e:	fc 01       	movw	r30, r24
 c10:	e9 55       	subi	r30, 0x59	; 89
 c12:	fe 4f       	sbci	r31, 0xFE	; 254
c=0;

UART_tx('#');
UART_txsl(r,10);
UART_txs("&RST*");
while(c<nos)
 c14:	76 14       	cp	r7, r6
 c16:	08 f4       	brcc	.+2      	; 0xc1a <del_reg+0x2de>
 c18:	da ce       	rjmp	.-588    	; 0x9ce <del_reg+0x92>
t_off[(c*4)+3]=t_off[((c+1)*4)+3];
c++;
}
}
}
UART_txs("OK");
 c1a:	85 eb       	ldi	r24, 0xB5	; 181
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	2f da       	rcall	.-2978   	; 0x7e <UART_txs>
nos--;
 c20:	80 91 e5 00 	lds	r24, 0x00E5
 c24:	81 50       	subi	r24, 0x01	; 1
 c26:	80 93 e5 00 	sts	0x00E5, r24
rom_update();
 c2a:	16 de       	rcall	.-980    	; 0x858 <rom_update>
}
 c2c:	60 96       	adiw	r28, 0x10	; 16
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	f8 94       	cli
 c32:	de bf       	out	0x3e, r29	; 62
 c34:	0f be       	out	0x3f, r0	; 63
 c36:	cd bf       	out	0x3d, r28	; 61
 c38:	cf 91       	pop	r28
 c3a:	df 91       	pop	r29
 c3c:	1f 91       	pop	r17
 c3e:	0f 91       	pop	r16
 c40:	ff 90       	pop	r15
 c42:	ef 90       	pop	r14
 c44:	df 90       	pop	r13
 c46:	cf 90       	pop	r12
 c48:	bf 90       	pop	r11
 c4a:	af 90       	pop	r10
 c4c:	9f 90       	pop	r9
 c4e:	8f 90       	pop	r8
 c50:	7f 90       	pop	r7
 c52:	6f 90       	pop	r6
 c54:	5f 90       	pop	r5
 c56:	4f 90       	pop	r4
 c58:	3f 90       	pop	r3
 c5a:	2f 90       	pop	r2
 c5c:	08 95       	ret

00000c5e <new_reg>:
UART_txs("&OFF*");
}
//============================================================================================================================

void new_reg()	// Register a new module
{
 c5e:	df 93       	push	r29
 c60:	cf 93       	push	r28
 c62:	cd b7       	in	r28, 0x3d	; 61
 c64:	de b7       	in	r29, 0x3e	; 62
 c66:	2a 97       	sbiw	r28, 0x0a	; 10
 c68:	0f b6       	in	r0, 0x3f	; 63
 c6a:	f8 94       	cli
 c6c:	de bf       	out	0x3e, r29	; 62
 c6e:	0f be       	out	0x3f, r0	; 63
 c70:	cd bf       	out	0x3d, r28	; 61
vars_update();
 c72:	1c de       	rcall	.-968    	; 0x8ac <vars_update>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 c74:	5f 9b       	sbis	0x0b, 7	; 11
 c76:	fe cf       	rjmp	.-4      	; 0xc74 <new_reg+0x16>
return(UDR);
 c78:	8c b1       	in	r24, 0x0c	; 12
 c7a:	fe 01       	movw	r30, r28
 c7c:	31 96       	adiw	r30, 0x01	; 1
uint8_t c,t=0,r[10];
c=UART_rx();
c=0;
while(c<10)
 c7e:	9e 01       	movw	r18, r28
 c80:	25 5f       	subi	r18, 0xF5	; 245
 c82:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 c84:	5f 9b       	sbis	0x0b, 7	; 11
 c86:	fe cf       	rjmp	.-4      	; 0xc84 <new_reg+0x26>
return(UDR);
 c88:	8c b1       	in	r24, 0x0c	; 12
{
r[c]=UART_rx();
 c8a:	81 93       	st	Z+, r24
{
vars_update();
uint8_t c,t=0,r[10];
c=UART_rx();
c=0;
while(c<10)
 c8c:	e2 17       	cp	r30, r18
 c8e:	f3 07       	cpc	r31, r19
 c90:	c9 f7       	brne	.-14     	; 0xc84 <new_reg+0x26>
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <new_reg+0x34>

00000c94 <readcmd>:
return(t);
}
//============================================================================================================================

void readcmd() //reads UART commands for a valid command and returns the designated command number
{
 c94:	df 93       	push	r29
 c96:	cf 93       	push	r28
 c98:	00 d0       	rcall	.+0      	; 0xc9a <readcmd+0x6>
 c9a:	0f 92       	push	r0
 c9c:	cd b7       	in	r28, 0x3d	; 61
 c9e:	de b7       	in	r29, 0x3e	; 62
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 ca0:	5f 9b       	sbis	0x0b, 7	; 11
 ca2:	fe cf       	rjmp	.-4      	; 0xca0 <readcmd+0xc>
return(UDR);
 ca4:	8c b1       	in	r24, 0x0c	; 12
 ca6:	fe 01       	movw	r30, r28
 ca8:	31 96       	adiw	r30, 0x01	; 1
uint8_t c=0,t=1,r[3];
t=UART_rx();
while(c<3)
 caa:	9e 01       	movw	r18, r28
 cac:	2c 5f       	subi	r18, 0xFC	; 252
 cae:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 cb0:	5f 9b       	sbis	0x0b, 7	; 11
 cb2:	fe cf       	rjmp	.-4      	; 0xcb0 <readcmd+0x1c>
return(UDR);
 cb4:	8c b1       	in	r24, 0x0c	; 12
{
r[c]=UART_rx();
 cb6:	81 93       	st	Z+, r24

void readcmd() //reads UART commands for a valid command and returns the designated command number
{
uint8_t c=0,t=1,r[3];
t=UART_rx();
while(c<3)
 cb8:	e2 17       	cp	r30, r18
 cba:	f3 07       	cpc	r31, r19
 cbc:	c9 f7       	brne	.-14     	; 0xcb0 <readcmd+0x1c>
{
r[c]=UART_rx();
c++;
}
if(r[0]=='A'&&r[1]=='L'&&r[2]=='M')			//ALARM MODE
 cbe:	89 81       	ldd	r24, Y+1	; 0x01
 cc0:	81 34       	cpi	r24, 0x41	; 65
 cc2:	99 f4       	brne	.+38     	; 0xcea <readcmd+0x56>
 cc4:	8a 81       	ldd	r24, Y+2	; 0x02
 cc6:	8c 34       	cpi	r24, 0x4C	; 76
 cc8:	09 f0       	breq	.+2      	; 0xccc <readcmd+0x38>
 cca:	7f c0       	rjmp	.+254    	; 0xdca <readcmd+0x136>
 ccc:	8b 81       	ldd	r24, Y+3	; 0x03
 cce:	8d 34       	cpi	r24, 0x4D	; 77
 cd0:	09 f0       	breq	.+2      	; 0xcd4 <readcmd+0x40>
 cd2:	7b c0       	rjmp	.+246    	; 0xdca <readcmd+0x136>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 cd4:	5f 9b       	sbis	0x0b, 7	; 11
 cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <readcmd+0x40>
return(UDR);
 cd8:	8c b1       	in	r24, 0x0c	; 12
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 cda:	5f 9b       	sbis	0x0b, 7	; 11
 cdc:	fe cf       	rjmp	.-4      	; 0xcda <readcmd+0x46>
return(UDR);
 cde:	8c b1       	in	r24, 0x0c	; 12
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 ce0:	5f 9b       	sbis	0x0b, 7	; 11
 ce2:	fe cf       	rjmp	.-4      	; 0xce0 <readcmd+0x4c>
return(UDR);
 ce4:	9c b1       	in	r25, 0x0c	; 12
{
t=UART_rx();
t=UART_rx();
r[1]=UART_rx();
alm_mode(t);
 ce6:	4c db       	rcall	.-2408   	; 0x380 <alm_mode>
 ce8:	70 c0       	rjmp	.+224    	; 0xdca <readcmd+0x136>
}
else if(r[0]=='D'&&r[1]=='E'&&r[2]=='L')	// Delete A DEVICE
 cea:	84 34       	cpi	r24, 0x44	; 68
 cec:	69 f4       	brne	.+26     	; 0xd08 <readcmd+0x74>
 cee:	8a 81       	ldd	r24, Y+2	; 0x02
 cf0:	85 34       	cpi	r24, 0x45	; 69
 cf2:	09 f0       	breq	.+2      	; 0xcf6 <readcmd+0x62>
 cf4:	6a c0       	rjmp	.+212    	; 0xdca <readcmd+0x136>
 cf6:	8b 81       	ldd	r24, Y+3	; 0x03
 cf8:	8c 34       	cpi	r24, 0x4C	; 76
 cfa:	09 f0       	breq	.+2      	; 0xcfe <readcmd+0x6a>
 cfc:	66 c0       	rjmp	.+204    	; 0xdca <readcmd+0x136>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 cfe:	5f 9b       	sbis	0x0b, 7	; 11
 d00:	fe cf       	rjmp	.-4      	; 0xcfe <readcmd+0x6a>
return(UDR);
 d02:	8c b1       	in	r24, 0x0c	; 12
{
t=UART_rx();
del_reg();
 d04:	1b de       	rcall	.-970    	; 0x93c <del_reg>
 d06:	61 c0       	rjmp	.+194    	; 0xdca <readcmd+0x136>
}
else if(r[0]=='T'&&r[1]=='D'&&r[2]=='Q')	//TIME AND DATE QUERY
 d08:	84 35       	cpi	r24, 0x54	; 84
 d0a:	a1 f4       	brne	.+40     	; 0xd34 <readcmd+0xa0>
 d0c:	8a 81       	ldd	r24, Y+2	; 0x02
 d0e:	84 34       	cpi	r24, 0x44	; 68
 d10:	09 f0       	breq	.+2      	; 0xd14 <readcmd+0x80>
 d12:	5b c0       	rjmp	.+182    	; 0xdca <readcmd+0x136>
 d14:	8b 81       	ldd	r24, Y+3	; 0x03
 d16:	81 35       	cpi	r24, 0x51	; 81
 d18:	29 f4       	brne	.+10     	; 0xd24 <readcmd+0x90>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 d1a:	5f 9b       	sbis	0x0b, 7	; 11
 d1c:	fe cf       	rjmp	.-4      	; 0xd1a <readcmd+0x86>
return(UDR);
 d1e:	8c b1       	in	r24, 0x0c	; 12
{
t=UART_rx();
time_tx();
 d20:	12 dc       	rcall	.-2012   	; 0x546 <time_tx>
 d22:	53 c0       	rjmp	.+166    	; 0xdca <readcmd+0x136>
}
else if(r[0]=='T'&&r[1]=='D'&&r[2]=='S')	//TIME AND DATE SET
 d24:	83 35       	cpi	r24, 0x53	; 83
 d26:	09 f0       	breq	.+2      	; 0xd2a <readcmd+0x96>
 d28:	50 c0       	rjmp	.+160    	; 0xdca <readcmd+0x136>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 d2a:	5f 9b       	sbis	0x0b, 7	; 11
 d2c:	fe cf       	rjmp	.-4      	; 0xd2a <readcmd+0x96>
return(UDR);
 d2e:	8c b1       	in	r24, 0x0c	; 12
{
t=UART_rx();
time_set();
 d30:	93 db       	rcall	.-2266   	; 0x458 <time_set>
 d32:	4b c0       	rjmp	.+150    	; 0xdca <readcmd+0x136>
}
else if(r[0]=='N'&&r[1]=='E'&&r[2]=='W')	//NEW MODULE ENTRY
 d34:	8e 34       	cpi	r24, 0x4E	; 78
 d36:	69 f4       	brne	.+26     	; 0xd52 <readcmd+0xbe>
 d38:	8a 81       	ldd	r24, Y+2	; 0x02
 d3a:	85 34       	cpi	r24, 0x45	; 69
 d3c:	09 f0       	breq	.+2      	; 0xd40 <readcmd+0xac>
 d3e:	45 c0       	rjmp	.+138    	; 0xdca <readcmd+0x136>
 d40:	8b 81       	ldd	r24, Y+3	; 0x03
 d42:	87 35       	cpi	r24, 0x57	; 87
 d44:	09 f0       	breq	.+2      	; 0xd48 <readcmd+0xb4>
 d46:	41 c0       	rjmp	.+130    	; 0xdca <readcmd+0x136>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 d48:	5f 9b       	sbis	0x0b, 7	; 11
 d4a:	fe cf       	rjmp	.-4      	; 0xd48 <readcmd+0xb4>
return(UDR);
 d4c:	8c b1       	in	r24, 0x0c	; 12
{
t=UART_rx();
new_reg();
 d4e:	87 df       	rcall	.-242    	; 0xc5e <new_reg>
 d50:	3c c0       	rjmp	.+120    	; 0xdca <readcmd+0x136>
}
else if(r[0]=='S'&&r[1]=='D'&&r[2]=='N')	//SHUT DOWN SYSTEM
 d52:	83 35       	cpi	r24, 0x53	; 83
 d54:	59 f4       	brne	.+22     	; 0xd6c <readcmd+0xd8>
 d56:	8a 81       	ldd	r24, Y+2	; 0x02
 d58:	84 34       	cpi	r24, 0x44	; 68
 d5a:	59 f5       	brne	.+86     	; 0xdb2 <readcmd+0x11e>
 d5c:	8b 81       	ldd	r24, Y+3	; 0x03
 d5e:	8e 34       	cpi	r24, 0x4E	; 78
 d60:	41 f5       	brne	.+80     	; 0xdb2 <readcmd+0x11e>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 d62:	5f 9b       	sbis	0x0b, 7	; 11
 d64:	fe cf       	rjmp	.-4      	; 0xd62 <readcmd+0xce>
return(UDR);
 d66:	8c b1       	in	r24, 0x0c	; 12
{
t=UART_rx();
shut_down();
 d68:	dc da       	rcall	.-2632   	; 0x322 <shut_down>
 d6a:	2f c0       	rjmp	.+94     	; 0xdca <readcmd+0x136>
}
else if(r[0]=='C'&&r[1]=='O'&&r[2]=='N')	//SWITCH ONN A MODULE
 d6c:	83 34       	cpi	r24, 0x43	; 67
 d6e:	91 f4       	brne	.+36     	; 0xd94 <readcmd+0x100>
 d70:	8a 81       	ldd	r24, Y+2	; 0x02
 d72:	8f 34       	cpi	r24, 0x4F	; 79
 d74:	51 f5       	brne	.+84     	; 0xdca <readcmd+0x136>
 d76:	8b 81       	ldd	r24, Y+3	; 0x03
 d78:	8e 34       	cpi	r24, 0x4E	; 78
 d7a:	29 f4       	brne	.+10     	; 0xd86 <readcmd+0xf2>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 d7c:	5f 9b       	sbis	0x0b, 7	; 11
 d7e:	fe cf       	rjmp	.-4      	; 0xd7c <readcmd+0xe8>
return(UDR);
 d80:	8c b1       	in	r24, 0x0c	; 12
{
t=UART_rx();
conn();
 d82:	10 db       	rcall	.-2528   	; 0x3a4 <conn>
 d84:	22 c0       	rjmp	.+68     	; 0xdca <readcmd+0x136>
}
else if(r[0]=='C'&&r[1]=='O'&&r[2]=='F')	//SWITCH OFF A MODULE
 d86:	86 34       	cpi	r24, 0x46	; 70
 d88:	01 f5       	brne	.+64     	; 0xdca <readcmd+0x136>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 d8a:	5f 9b       	sbis	0x0b, 7	; 11
 d8c:	fe cf       	rjmp	.-4      	; 0xd8a <readcmd+0xf6>
return(UDR);
 d8e:	8c b1       	in	r24, 0x0c	; 12
{
t=UART_rx();
coff();
 d90:	36 db       	rcall	.-2452   	; 0x3fe <coff>
 d92:	1b c0       	rjmp	.+54     	; 0xdca <readcmd+0x136>
}
else if(r[0]=='U'&&r[1]=='P'&&r[2]=='D')	//REMOTE MODULE UPDATE
 d94:	85 35       	cpi	r24, 0x55	; 85
 d96:	59 f4       	brne	.+22     	; 0xdae <readcmd+0x11a>
 d98:	8a 81       	ldd	r24, Y+2	; 0x02
 d9a:	80 35       	cpi	r24, 0x50	; 80
 d9c:	b1 f4       	brne	.+44     	; 0xdca <readcmd+0x136>
 d9e:	8b 81       	ldd	r24, Y+3	; 0x03
 da0:	84 34       	cpi	r24, 0x44	; 68
 da2:	99 f4       	brne	.+38     	; 0xdca <readcmd+0x136>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 da4:	5f 9b       	sbis	0x0b, 7	; 11
 da6:	fe cf       	rjmp	.-4      	; 0xda4 <readcmd+0x110>
return(UDR);
 da8:	8c b1       	in	r24, 0x0c	; 12
{
t=UART_rx();
updt_remote();
 daa:	aa dd       	rcall	.-1196   	; 0x900 <updt_remote>
 dac:	0e c0       	rjmp	.+28     	; 0xdca <readcmd+0x136>
}
else if(r[0]=='S'&&r[1]=='O'&&r[2]=='K')	//Exit Emergency mode
 dae:	83 35       	cpi	r24, 0x53	; 83
 db0:	61 f4       	brne	.+24     	; 0xdca <readcmd+0x136>
 db2:	8a 81       	ldd	r24, Y+2	; 0x02
 db4:	8f 34       	cpi	r24, 0x4F	; 79
 db6:	49 f4       	brne	.+18     	; 0xdca <readcmd+0x136>
 db8:	8b 81       	ldd	r24, Y+3	; 0x03
 dba:	8b 34       	cpi	r24, 0x4B	; 75
 dbc:	31 f4       	brne	.+12     	; 0xdca <readcmd+0x136>
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 dbe:	5f 9b       	sbis	0x0b, 7	; 11
 dc0:	fe cf       	rjmp	.-4      	; 0xdbe <readcmd+0x12a>
return(UDR);
 dc2:	8c b1       	in	r24, 0x0c	; 12
{
t=UART_rx();
emm=0;
 dc4:	10 92 c8 00 	sts	0x00C8, r1
em_swit();
 dc8:	09 dd       	rcall	.-1518   	; 0x7dc <em_swit>
}

}
 dca:	0f 90       	pop	r0
 dcc:	0f 90       	pop	r0
 dce:	0f 90       	pop	r0
 dd0:	cf 91       	pop	r28
 dd2:	df 91       	pop	r29
 dd4:	08 95       	ret

00000dd6 <varupdt>:
rstat=eeprom_read_byte(fr);
}

void varupdt()	//for reading no. of modules registered
{
nos=eeprom_read_byte(modnos);
 dd6:	80 91 90 01 	lds	r24, 0x0190
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	b3 d0       	rcall	.+358    	; 0xf44 <__eerd_byte_m8>
 dde:	80 93 e5 00 	sts	0x00E5, r24
}
 de2:	08 95       	ret

00000de4 <readmodname>:
}
}
//============================================================================================================================

uint8_t readmodname()			//MODULE NAME VERIFICATION
{
 de4:	df 93       	push	r29
 de6:	cf 93       	push	r28
 de8:	cd b7       	in	r28, 0x3d	; 61
 dea:	de b7       	in	r29, 0x3e	; 62
 dec:	2a 97       	sbiw	r28, 0x0a	; 10
 dee:	0f b6       	in	r0, 0x3f	; 63
 df0:	f8 94       	cli
 df2:	de bf       	out	0x3e, r29	; 62
 df4:	0f be       	out	0x3f, r0	; 63
 df6:	cd bf       	out	0x3d, r28	; 61
varupdt();
 df8:	ee df       	rcall	.-36     	; 0xdd6 <varupdt>
 dfa:	fe 01       	movw	r30, r28
 dfc:	31 96       	adiw	r30, 0x01	; 1
uint8_t c=0,t=0,r[10];
while(c<10)
 dfe:	9e 01       	movw	r18, r28
 e00:	25 5f       	subi	r18, 0xF5	; 245
 e02:	3f 4f       	sbci	r19, 0xFF	; 255
Use: unsigned char var=UART_rx();
*************************************************************************/

unsigned char UART_rx()
{
while((UCSRA&(1<<RXC))==0);
 e04:	5f 9b       	sbis	0x0b, 7	; 11
 e06:	fe cf       	rjmp	.-4      	; 0xe04 <readmodname+0x20>
return(UDR);
 e08:	8c b1       	in	r24, 0x0c	; 12
{
r[c]=UART_rx();
 e0a:	81 93       	st	Z+, r24

uint8_t readmodname()			//MODULE NAME VERIFICATION
{
varupdt();
uint8_t c=0,t=0,r[10];
while(c<10)
 e0c:	e2 17       	cp	r30, r18
 e0e:	f3 07       	cpc	r31, r19
 e10:	c9 f7       	brne	.-14     	; 0xe04 <readmodname+0x20>
{
r[c]=UART_rx();
c++;
}
if(r[0]=='C'&&r[1]=='O'&&r[2]=='N'&&r[3]=='T'&&r[4]=='R'&&r[5]=='O'&&r[6]=='L'&&r[7]=='L'&&r[8]=='E'&&r[9]=='R')
 e12:	89 81       	ldd	r24, Y+1	; 0x01
 e14:	83 34       	cpi	r24, 0x43	; 67
 e16:	01 f5       	brne	.+64     	; 0xe58 <readmodname+0x74>
 e18:	8a 81       	ldd	r24, Y+2	; 0x02
 e1a:	8f 34       	cpi	r24, 0x4F	; 79
 e1c:	e9 f4       	brne	.+58     	; 0xe58 <readmodname+0x74>
 e1e:	8b 81       	ldd	r24, Y+3	; 0x03
 e20:	8e 34       	cpi	r24, 0x4E	; 78
 e22:	d1 f4       	brne	.+52     	; 0xe58 <readmodname+0x74>
 e24:	8c 81       	ldd	r24, Y+4	; 0x04
 e26:	84 35       	cpi	r24, 0x54	; 84
 e28:	b9 f4       	brne	.+46     	; 0xe58 <readmodname+0x74>
 e2a:	8d 81       	ldd	r24, Y+5	; 0x05
 e2c:	82 35       	cpi	r24, 0x52	; 82
 e2e:	a1 f4       	brne	.+40     	; 0xe58 <readmodname+0x74>
 e30:	8e 81       	ldd	r24, Y+6	; 0x06
 e32:	8f 34       	cpi	r24, 0x4F	; 79
 e34:	89 f4       	brne	.+34     	; 0xe58 <readmodname+0x74>
 e36:	8f 81       	ldd	r24, Y+7	; 0x07
 e38:	8c 34       	cpi	r24, 0x4C	; 76
 e3a:	71 f4       	brne	.+28     	; 0xe58 <readmodname+0x74>
 e3c:	88 85       	ldd	r24, Y+8	; 0x08
 e3e:	8c 34       	cpi	r24, 0x4C	; 76
 e40:	59 f4       	brne	.+22     	; 0xe58 <readmodname+0x74>
 e42:	89 85       	ldd	r24, Y+9	; 0x09
 e44:	85 34       	cpi	r24, 0x45	; 69
 e46:	41 f4       	brne	.+16     	; 0xe58 <readmodname+0x74>
 e48:	90 e0       	ldi	r25, 0x00	; 0
 e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
 e4c:	82 35       	cpi	r24, 0x52	; 82
 e4e:	09 f0       	breq	.+2      	; 0xe52 <readmodname+0x6e>
 e50:	91 e0       	ldi	r25, 0x01	; 1
 e52:	81 e0       	ldi	r24, 0x01	; 1
 e54:	98 27       	eor	r25, r24
 e56:	01 c0       	rjmp	.+2      	; 0xe5a <readmodname+0x76>
 e58:	90 e0       	ldi	r25, 0x00	; 0
{t=1;}
else
{t=0;}
return(t);
}
 e5a:	89 2f       	mov	r24, r25
 e5c:	2a 96       	adiw	r28, 0x0a	; 10
 e5e:	0f b6       	in	r0, 0x3f	; 63
 e60:	f8 94       	cli
 e62:	de bf       	out	0x3e, r29	; 62
 e64:	0f be       	out	0x3f, r0	; 63
 e66:	cd bf       	out	0x3d, r28	; 61
 e68:	cf 91       	pop	r28
 e6a:	df 91       	pop	r29
 e6c:	08 95       	ret

00000e6e <__vector_11>:

}


ISR(USART_RXC_vect)
{
 e6e:	1f 92       	push	r1
 e70:	0f 92       	push	r0
 e72:	0f b6       	in	r0, 0x3f	; 63
 e74:	0f 92       	push	r0
 e76:	11 24       	eor	r1, r1
 e78:	2f 93       	push	r18
 e7a:	3f 93       	push	r19
 e7c:	4f 93       	push	r20
 e7e:	5f 93       	push	r21
 e80:	6f 93       	push	r22
 e82:	7f 93       	push	r23
 e84:	8f 93       	push	r24
 e86:	9f 93       	push	r25
 e88:	af 93       	push	r26
 e8a:	bf 93       	push	r27
 e8c:	ef 93       	push	r30
 e8e:	ff 93       	push	r31
cli();
 e90:	f8 94       	cli
	ret=UDR;
 e92:	8c b1       	in	r24, 0x0c	; 12
 e94:	80 93 a5 01 	sts	0x01A5, r24
	if(ret=='#')
 e98:	83 32       	cpi	r24, 0x23	; 35
 e9a:	21 f4       	brne	.+8      	; 0xea4 <__vector_11+0x36>
	{
	if(readmodname()==1)
 e9c:	a3 df       	rcall	.-186    	; 0xde4 <readmodname>
 e9e:	81 30       	cpi	r24, 0x01	; 1
 ea0:	09 f4       	brne	.+2      	; 0xea4 <__vector_11+0x36>
	{
	readcmd();
 ea2:	f8 de       	rcall	.-528    	; 0xc94 <readcmd>
	}
	}
	sei();
 ea4:	78 94       	sei
}
 ea6:	ff 91       	pop	r31
 ea8:	ef 91       	pop	r30
 eaa:	bf 91       	pop	r27
 eac:	af 91       	pop	r26
 eae:	9f 91       	pop	r25
 eb0:	8f 91       	pop	r24
 eb2:	7f 91       	pop	r23
 eb4:	6f 91       	pop	r22
 eb6:	5f 91       	pop	r21
 eb8:	4f 91       	pop	r20
 eba:	3f 91       	pop	r19
 ebc:	2f 91       	pop	r18
 ebe:	0f 90       	pop	r0
 ec0:	0f be       	out	0x3f, r0	; 63
 ec2:	0f 90       	pop	r0
 ec4:	1f 90       	pop	r1
 ec6:	18 95       	reti

00000ec8 <frupdt>:

//========================================================================================================================

void frupdt()	// for checking first run status
{
rstat=eeprom_read_byte(fr);
 ec8:	80 91 91 01 	lds	r24, 0x0191
 ecc:	90 e0       	ldi	r25, 0x00	; 0
 ece:	3a d0       	rcall	.+116    	; 0xf44 <__eerd_byte_m8>
 ed0:	80 93 a4 01 	sts	0x01A4, r24
}
 ed4:	08 95       	ret

00000ed6 <firstrun>:
eeprom_update_byte((uint8_t*)modnos,nos);
}
//============================================================================================================================

void firstrun()
{
 ed6:	0f 93       	push	r16
 ed8:	1f 93       	push	r17
frupdt();
 eda:	f6 df       	rcall	.-20     	; 0xec8 <frupdt>
varupdt();
 edc:	7c df       	rcall	.-264    	; 0xdd6 <varupdt>

uint8_t HH[2],MM[2],SS[2],dd[2],mm[2],yr[2];

void init_i2c()
{
TWSR = 0X00;
 ede:	11 b8       	out	0x01, r1	; 1
TWBR = 0X47;
 ee0:	87 e4       	ldi	r24, 0x47	; 71
 ee2:	80 b9       	out	0x00, r24	; 0
TWCR = (1<<TWEN);
 ee4:	84 e0       	ldi	r24, 0x04	; 4
 ee6:	86 bf       	out	0x36, r24	; 54
 ee8:	88 ea       	ldi	r24, 0xA8	; 168
 eea:	91 e6       	ldi	r25, 0x61	; 97
 eec:	01 97       	sbiw	r24, 0x01	; 1
 eee:	f1 f7       	brne	.-4      	; 0xeec <firstrun+0x16>
init_i2c();
_delay_ms(100);
uint8_t vz=1;
if(fr!=1)
 ef0:	80 91 91 01 	lds	r24, 0x0191
 ef4:	81 30       	cpi	r24, 0x01	; 1
 ef6:	99 f0       	breq	.+38     	; 0xf1e <firstrun+0x48>
{
eeprom_update_byte((uint8_t*)fr,vz);
 ef8:	90 e0       	ldi	r25, 0x00	; 0
 efa:	61 e0       	ldi	r22, 0x01	; 1
 efc:	3a d0       	rcall	.+116    	; 0xf72 <__eeupd_byte_m8>
eeprom_update_byte((uint8_t*)modnos,0);
 efe:	80 91 90 01 	lds	r24, 0x0190
 f02:	90 e0       	ldi	r25, 0x00	; 0
 f04:	60 e0       	ldi	r22, 0x00	; 0
 f06:	35 d0       	rcall	.+106    	; 0xf72 <__eeupd_byte_m8>
set_time_date("07","55","19","03","91");
 f08:	88 eb       	ldi	r24, 0xB8	; 184
 f0a:	90 e0       	ldi	r25, 0x00	; 0
 f0c:	6b eb       	ldi	r22, 0xBB	; 187
 f0e:	70 e0       	ldi	r23, 0x00	; 0
 f10:	4e eb       	ldi	r20, 0xBE	; 190
 f12:	50 e0       	ldi	r21, 0x00	; 0
 f14:	21 ec       	ldi	r18, 0xC1	; 193
 f16:	30 e0       	ldi	r19, 0x00	; 0
 f18:	04 ec       	ldi	r16, 0xC4	; 196
 f1a:	10 e0       	ldi	r17, 0x00	; 0
 f1c:	9c d9       	rcall	.-3272   	; 0x256 <set_time_date>
}
}
 f1e:	1f 91       	pop	r17
 f20:	0f 91       	pop	r16
 f22:	08 95       	ret

00000f24 <__eerd_block_m8>:
 f24:	dc 01       	movw	r26, r24
 f26:	cb 01       	movw	r24, r22

00000f28 <__eerd_blraw_m8>:
 f28:	fc 01       	movw	r30, r24
 f2a:	e1 99       	sbic	0x1c, 1	; 28
 f2c:	fe cf       	rjmp	.-4      	; 0xf2a <__eerd_blraw_m8+0x2>
 f2e:	06 c0       	rjmp	.+12     	; 0xf3c <__eerd_blraw_m8+0x14>
 f30:	ff bb       	out	0x1f, r31	; 31
 f32:	ee bb       	out	0x1e, r30	; 30
 f34:	e0 9a       	sbi	0x1c, 0	; 28
 f36:	31 96       	adiw	r30, 0x01	; 1
 f38:	0d b2       	in	r0, 0x1d	; 29
 f3a:	0d 92       	st	X+, r0
 f3c:	41 50       	subi	r20, 0x01	; 1
 f3e:	50 40       	sbci	r21, 0x00	; 0
 f40:	b8 f7       	brcc	.-18     	; 0xf30 <__eerd_blraw_m8+0x8>
 f42:	08 95       	ret

00000f44 <__eerd_byte_m8>:
 f44:	e1 99       	sbic	0x1c, 1	; 28
 f46:	fe cf       	rjmp	.-4      	; 0xf44 <__eerd_byte_m8>
 f48:	9f bb       	out	0x1f, r25	; 31
 f4a:	8e bb       	out	0x1e, r24	; 30
 f4c:	e0 9a       	sbi	0x1c, 0	; 28
 f4e:	99 27       	eor	r25, r25
 f50:	8d b3       	in	r24, 0x1d	; 29
 f52:	08 95       	ret

00000f54 <__eeupd_block_m8>:
 f54:	dc 01       	movw	r26, r24
 f56:	a4 0f       	add	r26, r20
 f58:	b5 1f       	adc	r27, r21
 f5a:	41 50       	subi	r20, 0x01	; 1
 f5c:	50 40       	sbci	r21, 0x00	; 0
 f5e:	40 f0       	brcs	.+16     	; 0xf70 <__eeupd_block_m8+0x1c>
 f60:	cb 01       	movw	r24, r22
 f62:	84 0f       	add	r24, r20
 f64:	95 1f       	adc	r25, r21
 f66:	2e 91       	ld	r18, -X
 f68:	05 d0       	rcall	.+10     	; 0xf74 <__eeupd_r18_m8>
 f6a:	41 50       	subi	r20, 0x01	; 1
 f6c:	50 40       	sbci	r21, 0x00	; 0
 f6e:	d8 f7       	brcc	.-10     	; 0xf66 <__eeupd_block_m8+0x12>
 f70:	08 95       	ret

00000f72 <__eeupd_byte_m8>:
 f72:	26 2f       	mov	r18, r22

00000f74 <__eeupd_r18_m8>:
 f74:	e1 99       	sbic	0x1c, 1	; 28
 f76:	fe cf       	rjmp	.-4      	; 0xf74 <__eeupd_r18_m8>
 f78:	9f bb       	out	0x1f, r25	; 31
 f7a:	8e bb       	out	0x1e, r24	; 30
 f7c:	e0 9a       	sbi	0x1c, 0	; 28
 f7e:	01 97       	sbiw	r24, 0x01	; 1
 f80:	0d b2       	in	r0, 0x1d	; 29
 f82:	02 16       	cp	r0, r18
 f84:	31 f0       	breq	.+12     	; 0xf92 <__eeupd_r18_m8+0x1e>
 f86:	2d bb       	out	0x1d, r18	; 29
 f88:	0f b6       	in	r0, 0x3f	; 63
 f8a:	f8 94       	cli
 f8c:	e2 9a       	sbi	0x1c, 2	; 28
 f8e:	e1 9a       	sbi	0x1c, 1	; 28
 f90:	0f be       	out	0x3f, r0	; 63
 f92:	08 95       	ret

00000f94 <_exit>:
 f94:	f8 94       	cli

00000f96 <__stop_program>:
 f96:	ff cf       	rjmp	.-2      	; 0xf96 <__stop_program>
